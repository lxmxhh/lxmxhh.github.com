<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 项目管理 | SamXu's blog]]></title>
  <link href="http://lxmxhh.github.io/blog/categories/xiang-mu-guan-li/atom.xml" rel="self"/>
  <link href="http://lxmxhh.github.io/"/>
  <updated>2014-06-07T17:14:33+08:00</updated>
  <id>http://lxmxhh.github.io/</id>
  <author>
    <name><![CDATA[Sam Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[敏捷开发过程剖析及工具推荐]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/07/17/agile-development-process/"/>
    <updated>2013-07-17T22:48:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/07/17/agile-development-process</id>
    <content type="html"><![CDATA[<p>敏捷开发，要求在开发过程中不断增强，从而提高软件质量，以达到提高商业收入的目的。它是一个迭代的过程，一个不断提高企业投资回报率和服务质量的过程。值得注意的是，成功的敏捷开发，单纯依附于活跃的开发过程和理解敏捷所带来的效益并对此有浓厚兴趣的企业用户。</p>

<p>本文将介绍敏捷开发的五大过程及这些过程中所要用到的工具。</p>

<p><img class="center" src="http://placekitten.com/500/160"></p>

<!--more-->


<ol>
<li><p><strong>敏捷计划</strong></p>

<p> 典型的敏捷开发将整体工作分为一系列的发布过程，每个发布过程都是一个迭代循环，每个迭代循环都会发布一组功能特性。</p>

<p> 敏捷计划规定了每个循环中所需要完成的工作（发布/迭代）。在该阶段，产品所有者将描述每个循环过程中他希望看到的产品样子。</p>

<p> 敏捷计划包含发布计划与迭代计划，两者的内容及执行者不同：</p>

<p> <strong>发布计划：</strong>包含每次发布的功能组。产品所有者负责在产品发布之前制定发布计划。<br/>
 <strong>迭代计划：</strong>开发团队需要在开发工作及迭代开始前确定需要完成的工作。可以通过每天的站立会议来实现。<br/>
 <strong>工具：</strong>制定敏捷计划，有很多工具可以使用，如： <br/>
 <a href="http://www.xplanner.org/">XPlanner</a><br/>
 <a href="http://www.xplanner.org/">Mingle</a><br/>
 <a href="http://www.extremeplanner.com/">Extreme Planner</a></p></li>
<li><p><strong>创建用户故事</strong></p>

<p> 用户故事，是对功能、特性的简单描述。每个特性也可能由很多故事组成。用户故事要简单且容易理解，能在几分钟内通过几行字表述清楚。请注意，用户故事是由项目所有者或主要用户群体来定义的，而非开发者。</p>

<p> 正如Mike Cohnrn所建议的，用户故事应该遵循下面的格式：</p>

<ul>
<li> 引用<br/>
<code>作为一个（某种角色），我需要（某事）如此如此。</code></li>
</ul>


<p> 例如，作为一个用户，我希望通过姓名来查找我的客户。</p>

<p> <strong>工具：</strong>最好的方法是使用索引卡片来记录各个故事。有很多种工具可以帮助完成故事图谱与故事追踪，如 <br/>
 <a href="http://toolsforagile.com/silverstories/">SilverStories</a><br/>
 <a href="http://www.pivotaltracker.com/">Pivotaltracker</a></p>

<p> <strong>注意：</strong>故事并不是一次性完成的，它循环往复，且贯穿于整个项目开发周期中。</p></li>
<li><p><strong>评估你的工作</strong></p>

<p> 在敏捷中，评估用于预测功能实现的复杂程度，并根据以前完成相似复杂度功能的经验预估所需要的完成时间。它是一个持续的过程，基于之前的经验和模式学习，不断提高评估的准确性。</p>

<p> 通常，评估故事的复杂程度多基于故事要点，而非所耗费的时间。要点解释了故事的复杂性，并通过数据1，2，3……来体现。</p>

<p> 评估有助于做出更好的商业决策，定义发布/迭代的范围。例如，我们可以很容易地为每次迭代/发布中的所有故事分配同样的数字。</p>

<p> <strong>工具：</strong><a href="http://www.planningpoker.com/">Planning Poker</a>是定义和改善你评估的最好技术。</p>

<p> <img src="http://techmytalk.files.wordpress.com/2013/07/agile-estimation-chat.jpg" alt="agile-estimation-chat" /></p></li>
<li><p><strong>站立会议</strong></p>

<p>站立会议是开发团队每天进行的简短会议。会上每个人需要说明昨天所完成的事，及今天的计划和被分配任务现在的状态。商业用户和领域专家偶尔也会参加，这将给他们更多关于项目的信心。</p>

<p>它不是例行会议，仅仅对项目实施情况给出粗略的描述，而是要提供更多关于项目的可视性内容，增强团队间的协作，对当天的计划给出正确指导。</p>

<p><strong>工具：</strong>在站立会议中，白板是非常有效的工具。</p></li>
<li><p><strong>项目监控技术</strong></p>

<p><strong>速率：</strong></p>

<p>通过速率，可以精确地测量开发团队发布商业价值的速度。速率是对生产力的测量。通过计算一定间隔内完成工作的单元数来计算速率。</p>

<p>在每次迭代的最后，为了计算速率，敏捷团队会查看该过程所完成的工作要求，并累加与这些要求相关联的故事点。所完成故事点的总数便是团队的速率。首次小小的迭代之后，你会逐渐发现某种趋势，且能计算出平均速率。</p>

<p>下面一些工具可以帮助追踪速率。</p>

<p><a href="http://www.targetprocess.com/">TargetProcess</a><br/>
<a href="http://www.pivotaltracker.com/">Pivotaltracker</a><br/>
<a href="http://slimtimer.com/">Timetracking</a><br/>
<a href="http://www.versionone.com/">VersionOne</a></p>

<p><strong>Burndown Reports：</strong></p>

<p>Burndown  Report是追踪项目进度的另一个标尺。它用来追踪完成故事点的个数，监控简单的迭代、发布和整个项目积压的工作。它可以显示进度，反映产品交付的价值和团队的速率。</p>

<p>以下一些工具可用于测量Burndown Reports：</p>

<p><a href="http://www.targetprocess.com/">TargetProcess</a><br/>
<a href="http://www.xplanner.org/">XPlanner</a><br/>
<a href="http://www.pivotaltracker.com/">Pivotal Tracker</a><br/>
<a href="http://danube.com/scrumworks/basic">ScrumWorks</a></p></li>
</ol>


<p>原文来自：<a href="http://techmytalk.com/2013/07/14/agile-software-development-process/">TechMyTalk</a> / 译：<a href="http://www.csdn.net/article/2013-07-16/2816244">CSDN</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目管理的ONP原则]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/04/28/opn-principle/"/>
    <updated>2013-04-28T23:01:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/04/28/opn-principle</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://placekitten.com/240/320"></p>

<p>前阵子学到了一招，项目管理中关于预估的ONP原则。</p>


<p>顾名思义，O乐观估计，N普通估计，P悲观估计。</p>


<!--more-->


<p>当有一个新需求产生的时候，产品经理大表哥总是会问，“这个需要多长时间啊，最快什么时候能好？应该很简单的吧” 。</p>


<p>年轻气盛的小瘦就会回答了：“嗯，这个简单。两天帮你搞定。包在我身上。” 大表哥听了很高兴。这叫乐观估计。</p>


<p>曾吃过亏的老龚就会说：“这项工作我来做的话，需要4天完成。但考虑到各种不确定因素，保守估计8天吧。你的需求有哪次不是变来变去的？”大表哥羞愧的低下了头。这叫悲观估计。</p>


<p>见过世面的大师掐指一算：“老衲觉得需要4.3天，就算是5天吧。但也可能需要6天或者7天。” “大师，此话怎讲。说了等于白说。”</p>


<p>大师继续说：“其实佛祖托梦，给了我一个计算公式。套用即可。” “大师，您也太能忽悠了。”</p>


<p><code>
μ = (O+4N+P)/6              #平均值
σ = (P-O)/6                #标准差
U = μ or μ+1σ or μ+2σ    #估算值
</code></p>

<p>工作量预估实际上是一个概率分布问题。就拿刚才的例子来说，这个工作项有10%的可能性在2天内完成，15%的可能性在3天内完成，30%的可能性在4天内完成，25%的可能性在5天内完成，在6、7、8天内完成的可能性分别是10%、6%和3%。在1天以内或者9天以上完成的可能性基本为0。</p>


<p>当然，上述分布的情况比较理想化，只是用来举例。每次项目要如此进行概率估算，并且计算平均值和标准差，还是比较复杂的。为了简化计算，前人总结出了以上公式。</p>




<p>各位今后在进行工作量预估的时候不妨也这么试一下。先确定好合理的ONP，再套用公式。顺便把这套算法讲给产品经理听，做一个守信的专业程序员。</p>

]]></content>
  </entry>
  
</feed>
