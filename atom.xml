<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SamXu's blog]]></title>
  <link href="http://lxmxhh.github.io/atom.xml" rel="self"/>
  <link href="http://lxmxhh.github.io/"/>
  <updated>2013-04-30T13:13:43+08:00</updated>
  <id>http://lxmxhh.github.io/</id>
  <author>
    <name><![CDATA[Sam Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[排序算法比较]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/04/29/sorting-algorithms/"/>
    <updated>2013-04-29T22:41:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/04/29/sorting-algorithms</id>
    <content type="html"><![CDATA[<p><img src="http://placekitten.com/640/320"></p>

<p>今天来比较一下众多排序算法。</p>

<p>1 快速排序（QuickSort）</p>

<p>快速排序是一个就地排序，分而治之，大规模递归的算法。从本质上来说，它是归并排序的就地版本。快速排序可以由下面四步组成。</p>

<pre><code>1. 如果不多于1个数据，直接返回。
2. 一般选择序列最左边的值作为支点数据。
3. 将序列分成2部分，一部分都大于支点数据，另外一部分都小于支点数据。
4. 对两边利用递归排序数列。
</code></pre>

<p>快速排序比大部分排序算法都要快O(nlogn)。尽管我们可以在某些特殊的情况下写出比快速排序快的算法，但是就通常情况而言，没有比它更快的了。快速排序是递归的，对于内存非常有限的机器来说，它不是一个好的选择。</p>

<!--more-->


<p>2 归并排序（MergeSort）</p>

<p>归并排序先分解要排序的序列，从1分成2，2分成4，依次分解，当分解到只有1个一组的时候，就可以排序这些分组，然后依次合并回原来的序列中，这样就可以排序所有数据。合并排序比堆排序稍微快一点，但是需要比堆排序多一倍的内存空间，因为它需要一个额外的数组。</p>

<p>3 堆排序（HeapSort）</p>

<p>堆排序适合于数据量非常大的场合（百万数据）。</p>

<p>堆排序不需要大量的递归或者多维的暂存数组。这对于数据量非常巨大的序列是合适的。比如超过数百万条记录，因为快速排序，归并排序都使用递归来设计算法，在数据量非常大的时候，可能会发生堆栈溢出错误。</p>

<p>堆排序会将所有的数据建成一个堆，最大的数据在堆顶，然后将堆顶数据和序列的最后一个数据交换。接下来再次重建堆，交换数据，依次下去，就可以排序所有的数据。</p>

<p>4 Shell排序（ShellSort）</p>

<p>Shell排序通过将数据分成不同的组，先对每一组进行排序，然后再对所有的元素进行一次插入排序，以减少数据交换和移动的次数。平均效率是O(nlogn)。其中分组的合理性会对算法产生重要的影响。现在多用D.E.Knuth的分组方法。</p>

<p>Shell排序比冒泡排序快5倍，比插入排序大致快2倍。Shell排序比起QuickSort，MergeSort，HeapSort慢很多。但是它相对比较简单，它适合于数据量在5000以下并且速度并不是特别重要的场合。它对于数据量较小的数列重复排序是非常好的。</p>

<p>5 插入排序（InsertSort）</p>

<p>插入排序通过把序列中的值插入一个已经排序好的序列中，直到该序列的结束。插入排序是对冒泡排序的改进。它比冒泡排序快2倍。一般不用在数据大于1000的场合下使用插入排序，或者重复排序超过200数据项的序列。</p>

<p>6 冒泡排序（BubbleSort）</p>

<p>冒泡排序是最慢的排序算法。在实际运用中它是效率最低的算法。它通过一趟又一趟地比较数组中的每一个元素，使较大的数据下沉，较小的数据上升。它是O(n<sup>2)的算法。</sup></p>

<p>7 交换排序（ExchangeSort）和选择排序（SelectSort）</p>

<p>这两种排序方法都是交换方法的排序算法，效率都是 O(n2)。在实际应用中处于和冒泡排序基本相同的地位。它们只是排序算法发展的初级阶段，在实际中使用较少。</p>

<p>8 基数排序（RadixSort）</p>

<p>基数排序和通常的排序算法并不走同样的路线。它是一种比较新颖的算法，但是它只能用于整数的排序，如果我们要把同样的办法运用到浮点数上，我们必须了解浮点数的存储格式，并通过特殊的方式将浮点数映射到整数上，然后再映射回去，这是非常麻烦的事情，因此，它的使用同样也不多。而且，最重要的是，这样算法也需要较多的存储空间。</p>

<p>9 总结</p>

<p>下面是一个总的表格，大致总结了我们常见的所有的排序算法的特点。</p>

<table class="table table-bordered table-striped table-condensed">
    <tr>
        <th width="10%">排序法</th>
        <th width="15%">平均时间</th>
        <th width="20%">最差情形</th>
        <th width="15%">是否稳定</th>
        <th width="15%">额外空间</th>
        <th width="25%">备注</th>
    </tr>
    <tr><td>冒泡</td><td>O(n^2)</td><td>O(n^2)</td><td>稳定</td><td>O(1)</td><td>n小时较好</td></tr>
    <tr><td>交换</td><td>O(n^2)</td><td>O(n^2)</td><td>不稳定</td><td>O(1)</td><td>n小时较好</td></tr>
    <tr><td>选择</td><td>O(n^2)</td><td>O(n^2)</td><td>不稳定</td><td>O(1)</td><td>n小时较好</td></tr>
    <tr><td>插入</td><td>O(n^2)</td><td>O(n^2)</td><td>稳定</td><td>O(1)</td><td>大部分已排序时较好</td></tr>
    <tr><td>基数</td><td>O(logRB)</td><td>O(logRB)</td><td>稳定</td><td>O(n)</td><td>B是真数(0-9)，R是基数(个十百)</td></tr>
    <tr><td>Shell</td><td>O(nlogn)</td><td>O(n^s) 1&lt;s&lt;2</td><td> 不稳定</td><td>O(1)</td><td>s是所选分组</td></tr>
    <tr><td>快速</td><td>O(nlogn)</td><td>O(n^2)</td><td>不稳定</td><td>O(nlogn)</td><td>n大时较好</td></tr>
    <tr><td>归并</td><td>O(nlogn)</td><td>O(nlogn)</td><td>稳定</td><td>O(1)</td><td>n大时较好</td></tr>
    <tr><td>堆</td><td>O(nlogn)</td><td>O(nlogn)</td><td>不稳定</td><td>O(1)</td><td>n大时较好</td></tr>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目管理的ONP原则]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/04/28/opn-principle/"/>
    <updated>2013-04-28T23:01:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/04/28/opn-principle</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://placekitten.com/240/320"></p>

<p>前阵子学到了一招，项目管理中关于预估的ONP原则。</p>


<p>顾名思义，O乐观估计，N普通估计，P悲观估计。</p>


<!--more-->


<p>当有一个新需求产生的时候，产品经理大表哥总是会问，“这个需要多长时间啊，最快什么时候能好？应该很简单的吧” 。</p>


<p>年轻气盛的小瘦就会回答了：“嗯，这个简单。两天帮你搞定。包在我身上。” 大表哥听了很高兴。这叫乐观估计。</p>


<p>曾吃过亏的老龚就会说：“这项工作我来做的话，需要4天完成。但考虑到各种不确定因素，保守估计8天吧。你的需求有哪次不是变来变去的？”大表哥羞愧的低下了头。这叫悲观估计。</p>


<p>见过世面的大师掐指一算：“老衲觉得需要4.3天，就算是5天吧。但也可能需要6天或者7天。” “大师，此话怎讲。说了等于白说。”</p>


<p>大师继续说：“其实佛祖托梦，给了我一个计算公式。套用即可。” “大师，您也太能忽悠了。”</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>μ = (O+4N+P)/6           #平均值 
</span><span class='line'>σ = (P-O)/6              #标准差
</span><span class='line'>U = μ or μ+1σ or μ+2σ    #估算值</span></code></pre></td></tr></table></div></figure>


<p>工作量预估实际上是一个概率分布问题。就拿刚才的例子来说，这个工作项有10%的可能性在2天内完成，15%的可能性在3天内完成，30%的可能性在4天内完成，25%的可能性在5天内完成，在6、7、8天内完成的可能性分别是10%、6%和3%。在1天以内或者9天以上完成的可能性基本为0。</p>


<p>当然，上述分布的情况比较理想化，只是用来举例。每次项目要如此进行概率估算，并且计算平均值和标准差，还是比较复杂的。为了简化计算，前人总结出了以上公式。</p>




<p>各位今后在进行工作量预估的时候不妨也这么试一下。先确定好合理的ONP，再套用公式。顺便把这套算法讲给产品经理听，做一个守信的专业程序员。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[唯一不变的只有变化]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/04/27/wei-yi-bu-bian-de-zhi-you-bian-hua/"/>
    <updated>2013-04-27T09:09:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/04/27/wei-yi-bu-bian-de-zhi-you-bian-hua</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://placekitten.com/180/240">
知名科幻小说家Cory Doctorow曾说：“铁匠在啤酒中洒下眼泪，悲叹自己没有办法在铁路时代卖马掌，但这并不会使他们的马掌更受欢迎。那些学习变成机械师的铁匠才会保住自己的饭碗。”</p>

<p>企业也好，团队也好，唯有快速顺应时代才能赢得未来，产品生产方式必须因时代而变。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo teach me lean startup lessons
</span><span class='line'>$sudo show me the money</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/04/26/hello-world/"/>
    <updated>2013-04-26T23:47:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/04/26/hello-world</id>
    <content type="html"><![CDATA[<p><img src="http://placekitten.com/890/280"></p>
]]></content>
  </entry>
  
</feed>
