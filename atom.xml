<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SamXu's blog]]></title>
  <link href="http://lxmxhh.github.io/atom.xml" rel="self"/>
  <link href="http://lxmxhh.github.io/"/>
  <updated>2014-02-15T22:33:44+08:00</updated>
  <id>http://lxmxhh.github.io/</id>
  <author>
    <name><![CDATA[Sam Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JNI实战]]></title>
    <link href="http://lxmxhh.github.io/blog/2014/01/17/jni-in-action/"/>
    <updated>2014-01-17T20:50:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2014/01/17/jni-in-action</id>
    <content type="html"><![CDATA[<h1>引子</h1>

<p>对于刚入门的Android开发者来说，JNI是较难掌握的。JNI有一层神秘面纱，让人敬而远之。需要同时掌握C/C++语言与Android应用开发技术也提高了进入门槛。
让我们揭开面纱，由浅入深地学习JNI技术。</p>

<h1>JNI是什么</h1>

<p>JNI是Java Native Interface的缩写，直译成中文就是Java本地接口。JNI并不是Android特有的技术。在Android之前就在Java中得到广泛应用。Java能做到平台无关是因为运行在虚拟机上，而不同虚拟机在各自平台的实现，大多采用C/C++语言。通过JNI技术，Java代码可以调用C/C++的函数，反过来，C/C++也可以调用Java层的函数。JNI是沟通Java世界与Native世界的桥梁。</p>

<!--more-->


<h1>JNI与Android</h1>

<p>JNI在Android开发中占有重要地位。
大家都知道Android系统的四层结构。</p>

<ol>
<li>最底层是Linux内核层。</li>
<li>第二层Native层包括了运行时库和其他动态库，比如OpenGL ES，WebKit库等，都是用C或C++写的。</li>
<li>再上一层系统框架层是使用Java写的，它与Native层的交互，就大量使用了JNI技术，比如文件操作和socket操作等。</li>
<li>在最上层应用层，NDK开发组件使得开发者可以使用C++来编写核心算法，提高性能和代码复用性。应用需要使用到Android平台特性的地方，通过JNI来与Java层沟通，调用Android系统库提供的、Java语言编写的API，比如播放音乐视频，获取用户地理位置信息或者发送短信。</li>
</ol>


<h1>我们用JNI来做什么</h1>

<p>目前，市面上大部分手机游戏由于性能和跨平台的考虑，核心部分使用C/C++语言编写。而且，开发过程中或多或少会使用到开源库或游戏引擎，包括渲染引擎，物理引擎和音乐音效引擎等，它们大都使用C/C++编写。在制作Android平台的版本时，前端与手机特性相关的功能使用Java语音编写。两部分交互时需要使用JNI技术。</p>

<h1>JNI开发流程</h1>

<p>这里介绍我们平时常用的，在C++部分调用Java方法的场景。假设我们的游戏需要获取用户当前的地理位置信息，用来匹配附近玩家。获取地理位置信息需要从Android的<code>LocationManager</code>中获取，匹配工作在C++代码中完成。</p>

<p>直接上代码</p>

<p><em>MainActivity.java</em></p>

<pre><code>package com.samxu.hello_jni;
public class MainActivity extends Activity {
    public LocationUtil locationUtil;
    public LocationManager mLocationManager;
    public Button button1;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        // Get a reference to the LocationManager object.
        mLocationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        locationUtil = new LocationUtil();
        locationUtil.mLocationManager = mLocationManager;

        //调用Native方法stringFromJNI()
        Log.v("hello_jni", stringFromJNI());

        button1 = (Button) findViewById(R.id.button1);
        button1.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                //调用Native方法callSetupFromJNI()
                Log.v("hello_jni", callSetupFromJNI());
            }
         });
    }
    public native String stringFromJNI();
    public native String callSetupFromJNI();

    static {
        System.loadLibrary("hellojni"); //加载JNI库
    }
}
</code></pre>

<p><em>LocationUtil.java</em></p>

<pre><code>package com.samhxu.hello_jni;

public class LocationUtil {
    public LocationManager mLocationManager;
    private Location mLocation;

    public void setup() {
        Log.v("hello_jni", "initial setup");
        //init location
        mLocation = requestUpdatesFromProvider(LocationManager.GPS_PROVIDER);
    }
    public String getLocation() {
        return mLocation.getLatitude() + "," + mLocation.getLongitude();
    }
    private final LocationListener listener = new LocationListener() {
        @Override
        public void onLocationChanged(Location location) {
            // A new location update is received.  Do something useful with it.  Update the UI with 
            // the location update.
            mLocation = location;
        }
        //.......other override methods omitted
    };

    private Location requestUpdatesFromProvider(final String provider) {
        Location location = null;
        if (mLocationManager.isProviderEnabled(provider)) {
            mLocationManager.requestLocationUpdates(provider, TEN_SECONDS, TEN_METERS, listener);
            location = mLocationManager.getLastKnownLocation(provider);
        } else {
            //Toast.makeText(this, errorResId, Toast.LENGTH_LONG).show();
        }
        return location;
    }
}
</code></pre>

<p><em>hello_jni.c</em></p>

<pre><code>#include &lt;string.h&gt;
#include &lt;jni.h&gt;

jmethodID g_setupID = 0;
jfieldID g_locationUtilID = 0;
jobject g_locationUtil = 0;
jmethodID g_getLocaitonID = 0;

jstring Java_com_samhxu_hello_1jni_MainActivity_stringFromJNI( JNIEnv* env, jobject thiz ){
    jclass clazz = (*env)-&gt;FindClass(env, "com/samhxu/hello_jni/LocationUtil");
    //jobject locationUtil = getInstance(env, clazz);
    g_setupID = (*env)-&gt;GetMethodID(env, clazz, "setup", "()V");
    g_getLocaitonID = (*env)-&gt;GetMethodID(env,clazz, "getLocation", "()Ljava/lang/String;");
    jclass mainClazz = (*env)-&gt;FindClass(env, "com/samhxu/hello_jni/MainActivity");
    g_locationUtilID = (*env)-&gt;GetFieldID(env, mainClazz, "locationUtil", "Lcom/samhxu/hello_jni/LocationUtil;");
    jobject _locationUtil = (*env)-&gt;GetObjectField(env,thiz, g_locationUtilID);
    g_locationUtil = (*env)-&gt;NewGlobalRef(env, _locationUtil);

    (*env)-&gt;CallVoidMethod(env, g_locationUtil, g_setupID );

    return (*env)-&gt;NewStringUTF(env, "Hello from JNI !");
}

jstring Java_com_samhxu_hello_1jni_MainActivity_callSetupFromJNI( JNIEnv* env, jobject thiz ){
    jstring location = (jstring) (*env)-&gt;CallObjectMethod(env, g_locationUtil, g_getLocaitonID, NULL);
    return location;
}
</code></pre>

<p><em>Android.mk</em></p>

<pre><code>#LOCAL_PATH := $(call my-dir)
include $(CLEAR_VARS)
LOCAL_MODULE    := hellojni
LOCAL_SRC_FILES := src/hello_jni.c
include $(BUILD_SHARED_LIBRARY) 
</code></pre>

<h1>代码分析</h1>

<p>项目怎样搭建起来，网上有很多资料，就不再赘述。我们只分析上述代码的要点。</p>

<p>Java代码中，<code>System.loadLibrary("hellojni");</code>加载了JNI库。System.loadLibrary(&#8220;libname&#8221;)用来加载Android.mk中定义的Module库名。<code>public native String stringFromJNI();</code>声明了native函数，native关键字表示函数由JNI层来实现。
C代码中，实现了两个native函数。对于函数命名规则，我们采用了较为简单的静态注册法，即Java_PackageName_ClassName_MethodName,这样Java就能找到对应的native方法，并建立对应关系。在两个JNI方法中，参数列表都包含了JNIEnv*和jobject，返回值都为jstring。JNIEnv是JNI环境指针，后面会有详细表述。jobject是Java层调用方的对象类型，thiz表示由哪个对象来调用该函数。返回值类型jstring表示在Java层是String类型。数据类型的对应关系，可见下一小节。</p>

<h1>JNI数据类型</h1>

<p>Java中的数据类型和JNI的数据类型存在一种对应关系。JNI的数据类型在jni.h中可以找到定义。
下面的表可以概括：</p>

<table>
<tr>
    <th>Java类型</th><th>本地类型</th><th>JNI中定义的别名</th>
</tr>
<tr>
    <td>int</td><td>long</td><td>jint</td>
</tr>
<tr>
    <td>long</td><td>_int64</td><td>jlong</td>
</tr>
<tr>
    <td>byte</td><td>signed char</td><td>jbyte</td>
</tr>
<tr>
    <td>boolean</td><td>unsigned char</td><td>jboolean</td>
</tr>
<tr>
    <td>char</td><td>unsigned short</td><td>jchar</td>
</tr>
<tr>
    <td>short</td><td>short</td><td>jshort</td>
</tr>
<tr>
    <td>float</td><td>float</td><td>jfloat</td>
</tr>
<tr>
    <td>double</td><td>double</td><td>jdouble</td>
</tr>
<tr>
    <td>Object</td><td>_jobject*</td><td>jobject</td>
</tr>
</table>


<p>
&lt;&lt;图>></p>

<h1>JNIEnv介绍</h1>

<p>JNIEnv可以说是JNI中的主角。JNIEnv是与线程相关的代表JNI环境的结构体。每个线程都有一份JNIEnv。在使用时，应稍加注意线程一致性。本文不详细展开。
JNIEnv提供了一系列JNI系统函数，可以用来调用Java函数或者操作jobject对象等。操作jobject对象，实质上就是操作该对象的成员变量和成员方法。
JNIEnv获取对象的成员变量和成员方法的两个函数：
<code>jfieldID GetFieldID(jclass clazz, const char* name, const char* sig);</code>
<code>jmethodID GetMethodID(jclass clazz, const char* name, const char* sig);</code>
有了成员变量的句柄，我们就可以对成员变量进行get和set操作。
<code>NativeType Get&lt;type&gt;Field(JNIEnv* env, jobject obj, jfieldID fieldID);</code>
<code>void Set&lt;type&gt;Field(JNIEnv* env, jobject obj, jfieldID fieldID, NativeType value);</code>
有了成员方法的句柄，我们可以进行函数调用。
<code>NativeType Call&lt;type&gt;Method(JNIEnv* env, jobject obj, jmethodID methodID, … );</code>
对于静态方法，则使用<code>CallStatic&lt;type&gt;Method</code>系列方法。
<code>NativeType CallStatic&lt;type&gt;Method(JNIEnv* env, jobject obj, jmethodID methodID, … );</code></p>

<h1>jstring使用</h1>

<p><code>stringFromJNI</code>方法的最后一行，<code>return (*env)-&gt;NewStringUTF(env, "Hello from JNI")</code>用来返回一个C的字符串。
JNI中的<code>jstring</code>对应Java的<code>String</code>。而在C/C++中的<code>string</code>是另一种类型。两者的构成方式和属性完全不同。JNIEnv的<code>NewStringUTF</code>方法会把native的一个UTF-8字符串转换而得到一个<code>jstring</code>对象。这样就可以被Java层识别了。</p>

<h1>JNI类型签名</h1>

<p>看到前面的<code>GetMethodID</code>的最后一个参数，表示方法的参数和返回值。一定觉得这种表现形式奇怪吧。其实是根据转换规则来构成的。</p>

<p>基础类型的JNI描述符</p>

<table>
<tr>
    <th>JNI字段描述符</th><th>java编程语言</th>
</tr>
<tr>
    <td>Z</td><td>boolean</td>
</tr>
<tr>
    <td>B</td><td>byte</td>
</tr>
<tr>
    <td>C</td><td>char</td>
</tr>
<tr>
    <td>S</td><td>short</td>
</tr>
<tr>
    <td>I</td><td>int</td>
</tr>
<tr>
    <td>J</td><td>long</td>
</tr>
<tr>
    <td>F</td><td>float</td>
</tr>
<tr>
    <td>D</td><td>double</td>
</tr>
</table>


<p>一个引用类型的签名，例如<code>java.lang.String</code>，由<code>L</code>字母开头，并且以分号结束，包名”java.lang.String“中的”.“被”/“替换。所以<code>java.lang.String</code>被表示为：<code>”Ljava/lang/String;"</code>
下表提供了一个关于如何格式话方法描述符的完整的描述：</p>

<table>
<tr>
    <th>方法描述符</th><th>java语言类型</th>
</tr>
<tr>
    <td><code>"()Ljava/lang/String"</code></td><td>String f();</td>
 </tr>
<tr>
    <td><code>"(ILjava/lang/Class)J"</code></td><td>long f(int i, Class c);</td>
</tr>
<tr>
    <td><code>"([B)v"</code></td><td>void f(byte[ ] bytes);</td>
</tr>
</table>


<p>括号中的表示参数列表，括号后跟着返回值类型。</p>

<h1>引用与资源回收</h1>

<p>我们知道Java中创建的对象会由垃圾回收器来回收和释放对象。
·jobject g_locationUtil·是一个引用对象，在声明的scope结束时会被释放。<code>stringFromJNI</code>方法中<code>g_locationUtil = (*env)-&gt;NewGlobalRef(env, _locationUtil)</code>就是来解决这个问题的。这样，在<code>callSetupFromJni</code>方法中使用<code>g_locationUtil</code>的时候，就不会有问题。</p>

<h1>小结</h1>

<p>本文结合Android开发中使用JNI的实际问题，主要介绍了JNI的相关内容。想要全面了解JNI的知识，还需要认真阅读JDK文档中关于&lt; &lt; Java Native Interface Specification > >部分和Android开发文档中NDK开发部分，并结合大量实际使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年度总结]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/12/31/2013-conclusion/"/>
    <updated>2013-12-31T00:30:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/12/31/2013-conclusion</id>
    <content type="html"><![CDATA[<h1>1.工作变动</h1>

<ul>
<li>从原本舒适的职位辞职。主要是缺乏挑战，公司业务也一蹶不振，觉得自己已经中年，不能再荒废了。</li>
<li>渴望成功。再不寻求改变，这辈子会遗憾吧。</li>
<li>tx这边的确给了学习和成长的空间，通往成功的每一步都比较透明(GR, 职级晋升等流程)，企业文化也较好。</li>
<li>相比过去，精力不如以前旺盛，更加懂得需要珍惜时间，提高效率。养成总结的习惯。建立知识库。</li>
</ul>


<h1>2.学习</h1>

<ul>
<li>渲染研究 未完成</li>
<li>cocos2d 基本了解，缺乏实战</li>
<li>设计模式基本常用</li>
<li>算法学些未完成</li>
<li>养成了记录的习惯，evernote，dayone等工具的使用</li>
<li>读书的任务未完成</li>
<li>开放课程学习未完成</li>
</ul>


<h1>3.生活</h1>

<ul>
<li>三人三地，固定</li>
<li>确定两年内的目标，规划</li>
<li>恢复运动健身。保持身体健康，保证睡眠</li>
<li>适度用眼</li>
<li>徐苗苗的成长，教育</li>
</ul>


<h1>4.杂</h1>

<ul>
<li>12号线开通</li>
<li>新西兰旅游，厦门，周边地区</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding dynamic_cast in c++]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/11/13/dynamic-cast-in-c-plus-plus/"/>
    <updated>2013-11-13T22:59:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/11/13/dynamic-cast-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p>在面向对象程序设计中，有时我们需要在运行时查询一个对象是否能作为某种多态类型使用。与Java的instanceof，以及C#的as、is运算符类似，C++提供了<code>dynamic_cast</code>函数用于动态转型。相比C风格的强制类型转换和C++ <code>reinterpret_cast</code>，<code>dynamic_cast</code>提供了类型安全检查，是一种基于能力查询(Capability Query)的转换，所以在多态类型间进行转换更提倡采用<code>dynamic_cast</code>。本文主要介绍<code>dynamic_cast</code>的意义，用法和注意事项。</p>

<!--more-->


<p>
基本用法</p>

<p>dynamic_cast可以获取目标对象的引用或指针：</p>

<pre><code>T1 obj;
T2* pObj = dynamic_cast&lt;T2*&gt;(&amp;obj);     //转换为T2指针，失败返回NULL
T2&amp; refObj = dynamic_cast&lt;T2&amp;&gt;(obj);    //转换为T2引用，失败抛出bad_cast异常
</code></pre>

<p>多态类型</p>

<p>在使用时需要注意：被转换对象<code>obj</code>的类型<code>T1</code>必须是多态类型，即<code>T1</code>必须公有继承自其它类，或者<code>T1</code>拥有虚函数（继承或自定义）。若<code>T1</code>为非多态类型，使用<code>dynamic_cast</code>会报编译错误。下面的例子说明了哪些类属于多态类型，哪些类不是：</p>

<pre><code>//A为非多态类型 
class A{
};

//B为多态类型
class B{ 
    public: virtual ~B(){}
};

//D为多态类型
class D: public A{
};

//E为非多态类型
class E : private A{
};

//F为多态类型
class F : private B{
};
</code></pre>

<p>横向转型</p>

<p>在多态类型间转换，分为3种类型：</p>

<p>1.子类向基类的向上转型(Up Cast)</p>

<p>2.基类向子类的向下转型(Down Cast)</p>

<p>3.横向转型(Cross Cast)</p>

<p>向上转型是多态的基础，需不要借助任何特殊的方法，只需用将子类的指针或引用赋给基类的指针或引用即可，当然<code>dynamic_cast</code>也支持向上转型，而其总是肯定成功的。而对于向下转型和横向转型来讲，其实对于<code>dynamic_cast</code>并没有任何区别，它们都属于能力查询。为了理解方便，我们不妨把<code>dynamic_cast</code>视为cross cast：</p>

<pre><code>class Shape {
    public: virtual ~Shape();
    virtual void draw() const = 0;
};

class Rollable {
    public: virtual ~Rollable();
    virtual void roll() = 0;
};

class Circle : public Shape, public Rollable {
    void draw() const;
    void roll();
};

class Square : public Shape {
    void draw() const;
};

//横向转型失败
Shape *pShape1 = new Square();
Rollable *pRollable1 = dynamic_cast&lt;Rollable*&gt;(pShape2);//pRollable为NULL

//横向转型成功
Shape *pShape2 = new Circle();
Rollable *pRollable2 = dynamic_cast&lt;Rollable*&gt;(pShape2);//pRollable不为NULL
</code></pre>

<p>指针比较</p>

<p>接上面的例子，在我的机器上<code>pShape2</code>和<code>pRollable2</code>的值（所指向的地址）分别为：
<code>pShape2: 0x0039A294</code>, <code>pRollable2:0x0039A290</code></p>

<p>说明<code>dynamic_cast</code>在进行转型的时候对不同多态类型设置了不同的偏移量。接下来的问题是
<code>pRollable2 == pShape2</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[轻松编写 C++ 单元测试]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/08/28/googletest-for-cpp/"/>
    <updated>2013-08-28T22:35:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/08/28/googletest-for-cpp</id>
    <content type="html"><![CDATA[<p>作为一个TDD的脑残粉，凡事都想测试先行。现在回归C++开发，顿时觉得各种不方便。特别是手头没有好用的单元测试框架，开发效率简直无法忍受，写好的代码重构起来也畏手畏脚。</p>

<!--more-->


<p>
曾经尝试过CppUnit，作为JUnit的同胞，出自名门，但在C++开发中，尤其在VS环境下实在是太难用了（主要是由于 C++ 没有反射机制，而这是 JUnit 设计的基础）。偶然搜得googletest，一套由 google 发布的开源单元测试框架。</p>

<h2>应用 googletest 编写单元测试代码</h2>

<p>googletest 是由 Google 公司发布，且遵循 New BSD License （可用作商业用途）的开源项目，并且 googletest 可以支持绝大多数大家所熟知的平台。与 CppUnit 不同的是： googletest 可以自动记录下所有定义好的测试，不需要用户通过列举来指明哪些测试需要运行。</p>

<h3>定义单元测试</h3>

<p>在应用 googletest 编写单元测试时，使用 <code>TEST()</code> 宏来声明测试函数。如：</p>

<p>清单 1. 用 <code>TEST()</code> 宏声明测试函数
<code></p>

<pre><code>TEST(GlobalConfigurationTest, configurationDataTest) 
TEST(GlobalConfigurationTest, noConfigureFileTest)
</code></pre>

<p></code>
分别针对同一程序单元 <code>GlobalConfiguration</code> 声明了两个不同的测试函数，以分别对配置数据进行检查<code>configurationDataTest</code>，以及测试没有配置文件的特殊情况<code>noConfigureFileTest</code>。</p>

<h3>实现单元测试</h3>

<p>针对同一程序单元设计出不同的测试场景后（即划分出不同的 Test 后），开发者就可以编写单元测试分别实现这些测试场景了。</p>

<p>在 googletest 中实现单元测试，可通过 <code>ASSERT_*</code> 和 <code>EXPECT_*</code> 断言来对程序运行结果进行检查。 <code>ASSERT_*</code> 版本的断言失败时会产生致命失败，并结束当前函数； <code>EXPECT_*</code> 版本的断言失败时产生非致命失败，但不会中止当前函数。因此， <code>ASSERT_*</code> 常常被用于后续测试逻辑强制依赖的处理结果的断言，如创建对象后检查指针是否为空，若为空，则后续对象方法调用会失败；而 <code>EXPECT_*</code> 则用于即使失败也不会影响后续测试逻辑的处理结果的断言，如某个方法返回结果的多个属性的检查。</p>

<p>googletest 中定义了如下的断言：<br/>
表 1： googletest 定义的断言（ Assert ）</p>

<table class="table table-bordered table-striped table-condensed">
    <tr>
        <th>基本断言</th>
        <th>二进制比较</th>
        <th>字符串比较</th>
    </tr>
    <tr>
        <td>ASSERT_TRUE(condition); condition为真</td>
        <td>ASSERT_EQ(expected,actual); expected==actual</td>
        <td>ASSERT_STREQ(expected_str,actual_str); 两个 C 字符串有相同的内容</td>
    </tr>
    <tr>
        <td>EXPECT_TRUE(condition); condition为真</td>
        <td>EXPECT_EQ(expected,actual); expected==actual</td>
        <td>EXPECT_STREQ(expected_str,actual_str); 两个 C 字符串有相同的内容</td>
    </tr>
    <tr>
        <td>ASSERT_FALSE(condition); condition为假</td>
        <td>ASSERT_NE(val1,val2); val1!=val2</td>
        <td>ASSERT_STRNE(str1,str2); 两个 C 字符串有不同的内容</td>
    </tr>
    <tr>
        <td>EXPECT_FALSE(condition); condition为假</td>
        <td>EXPECT_NE(val1,val2); val1!=val2</td>
        <td>EXPECT_STRNE(str1,str2); 两个 C 字符串有不同的内容</td>
    </tr>
    <tr>
        <td></td>
        <td>ASSERT_LT(val1,val2); val1&ltval2</td>
        <td>ASSERT_STRCASEEQ(expected_str,actual_str); 两个 C 字符串有相同的内容，忽略大小写</td>
    </tr>
    <tr>
        <td></td>
        <td>EXPECT_LT(val1,val2); val1&ltval2</td>
        <td>EXPECT_STRCASEEQ(expected_str,actual_str); 两个 C 字符串有相同的内容，忽略大小写</td>
    </tr>
    <tr>
        <td></td>
        <td>ASSERT_LE(val1,val2); val1&lt=val2</td>
        <td>ASSERT_STRCASENE(expected_str,actual_str); 两个 C 字符串有不同的内容，忽略大小写</td>
    </tr>
    <tr>
        <td></td>
        <td>EXPECT_LE(val1,val2); val1&lt=val2</td>
        <td>EXPECT_STRCASENE(expected_str,actual_str); 两个 C 字符串有不同的内容，忽略大小写</td>
    </tr>
    <tr>
        <td></td>
        <td>ASSERT_GT(val1,val2); val1&gtval2</td>
        <td></td>
    </tr>
    <tr>
        <td></td>
        <td>EXPECT_GT(val1,val2); val1&gtval2</td>
        <td></td>
    </tr>
    <tr>
        <td></td>
        <td>ASSERT_GE(val1,val2); val1&gt=val2</td>
        <td></td>
    </tr>
    <tr>
        <td></td>
        <td>EXPECT_GE(val1,val2); val1&gt=val2</td>
        <td></td>
    </tr>
</table>


<p>下面的实例演示了上面部分断言的使用：</p>

<p>清单 2. 一个较完整的 googletest 单元测试实例
<code></p>

<pre><code>// Configure.h 
 #pragma once 

 #include &lt;string&gt; 
 #include &lt;vector&gt; 

 class Configure 
 { 
 private: 
    std::vector&lt;std::string&gt; vItems; 

 public: 
    int addItem(std::string str); 

    std::string getItem(int index); 

    int getSize(); 
 }; 

 // Configure.cpp 
 #include "Configure.h" 

 #include &lt;algorithm&gt; 

 /** 
 * @brief Add an item to configuration store. Duplicate item will be ignored 
 * @param str item to be stored 
 * @return the index of added configuration item 
 */ 
 int Configure::addItem(std::string str) 
 { 
    std::vector&lt;std::string&gt;::const_iterator vi=std::find(vItems.begin(), vItems.end(), str); 
    if (vi != vItems.end()) 
        return vi - vItems.begin(); 

    vItems.push_back(str); 
    return vItems.size() - 1; 
 } 

 /** 
 * @brief Return the configure item at specified index. 
 * If the index is out of range, "" will be returned 
 * @param index the index of item 
 * @return the item at specified index 
 */ 
 std::string Configure::getItem(int index) 
 { 
    if (index &gt;= vItems.size()) 
        return ""; 
    else 
        return vItems.at(index); 
 } 

 /// Retrieve the information about how many configuration items we have had 
 int Configure::getSize() 
 { 
    return vItems.size(); 
 } 

 // ConfigureTest.cpp 
 #include &lt;gtest/gtest.h&gt; 

 #include "Configure.h" 

 TEST(ConfigureTest, addItem) 
 { 
    // do some initialization 
    Configure* pc = new Configure(); 

    // validate the pointer is not null 
    ASSERT_TRUE(pc != NULL); 

    // call the method we want to test 
    pc-&gt;addItem("A"); 
    pc-&gt;addItem("B"); 
    pc-&gt;addItem("A"); 

    // validate the result after operation 
    EXPECT_EQ(pc-&gt;getSize(), 2); 
    EXPECT_STREQ(pc-&gt;getItem(0).c_str(), "A"); 
    EXPECT_STREQ(pc-&gt;getItem(1).c_str(), "B"); 
    EXPECT_STREQ(pc-&gt;getItem(10).c_str(), ""); 

    delete pc; 
 }
</code></pre>

<p></code></p>

<h3>运行单元测试</h3>

<p>在实现完单元测试的测试逻辑后，可以通过 <code>RUN_ALL_TESTS()</code> 来运行它们，如果所有测试成功，该函数返回 0，否则会返回 1 。 <code>RUN_ALL_TESTS()</code> 会运行你链接到的所有测试――它们可以来自不同的测试案例，甚至是来自不同的文件。</p>

<p>因此，运行 googletest 编写的单元测试的一种比较简单可行的方法是：<br/>
为每一个被测试的 class 分别创建一个测试文件，并在该文件中编写针对这一 class 的单元测试；<br/>
编写一个 <code>Main.cpp</code> 文件，并在其中包含以下代码，以运行所有单元测试：</p>

<p>清单 3. 初始化 googletest 并运行所有测试
<code></p>

<pre><code>#include &lt;gtest/gtest.h&gt; 

 int main(int argc, char** argv) { 
    testing::InitGoogleTest(&amp;argc, argv); 

    // Runs all tests using Google Test. 
    return RUN_ALL_TESTS(); 
 }
</code></pre>

<p></code>
最后，将所有测试代码及 <code>Main.cpp</code> 编译并链接到目标程序中。<br/>
此外，在运行可执行目标程序时，可以使用 <code>--gtest_filter</code> 来指定要执行的测试用例，如：</p>

<ul>
<li><code>./foo_test</code> 没有指定 <code>filter</code> ，运行所有测试；</li>
<li><code>./foo_test --gtest_filter=*</code> 指定 <code>filter</code> 为 <code>*</code> ，运行所有测试；</li>
<li><code>./foo_test --gtest_filter=FooTest.*</code> 运行测试用例 <code>FooTest</code> 的所有测试；</li>
<li><code>./foo_test --gtest_filter=*Null*:*Constructor*</code> 运行所有全名（即测试用例名 + “ . ” + 测试名，如 <code>GlobalConfigurationTest.noConfigureFileTest</code> ）含有&#8221;Null&#8221; 或&#8221;Constructor&#8221; 的测试；</li>
<li><code>./foo_test --gtest_filter=FooTest.*-FooTest.Bar</code> 运行测试用例 <code>FooTest</code> 的所有测试，但不包括 <code>FooTest.Bar</code>。
这一特性在包含大量测试用例的项目中会十分有用。</li>
</ul>


<hr />

<p>关于 googletest 的更多信息，请访问其项目主页：<a href="http://code.google.com/p/googletest/">http://code.google.com/p/googletest/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷开发过程剖析及工具推荐]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/07/17/agile-development-process/"/>
    <updated>2013-07-17T22:48:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/07/17/agile-development-process</id>
    <content type="html"><![CDATA[<p>敏捷开发，要求在开发过程中不断增强，从而提高软件质量，以达到提高商业收入的目的。它是一个迭代的过程，一个不断提高企业投资回报率和服务质量的过程。值得注意的是，成功的敏捷开发，单纯依附于活跃的开发过程和理解敏捷所带来的效益并对此有浓厚兴趣的企业用户。</p>

<p>本文将介绍敏捷开发的五大过程及这些过程中所要用到的工具。</p>

<p><img class="center" src="http://placekitten.com/500/160"></p>

<!--more-->


<ol>
<li><p><strong>敏捷计划</strong></p>

<p> 典型的敏捷开发将整体工作分为一系列的发布过程，每个发布过程都是一个迭代循环，每个迭代循环都会发布一组功能特性。</p>

<p> 敏捷计划规定了每个循环中所需要完成的工作（发布/迭代）。在该阶段，产品所有者将描述每个循环过程中他希望看到的产品样子。</p>

<p> 敏捷计划包含发布计划与迭代计划，两者的内容及执行者不同：</p>

<p> <strong>发布计划：</strong>包含每次发布的功能组。产品所有者负责在产品发布之前制定发布计划。<br/>
 <strong>迭代计划：</strong>开发团队需要在开发工作及迭代开始前确定需要完成的工作。可以通过每天的站立会议来实现。<br/>
 <strong>工具：</strong>制定敏捷计划，有很多工具可以使用，如： <br/>
 <a href="http://www.xplanner.org/">XPlanner</a><br/>
 <a href="http://www.xplanner.org/">Mingle</a><br/>
 <a href="http://www.extremeplanner.com/">Extreme Planner</a></p></li>
<li><p><strong>创建用户故事</strong></p>

<p> 用户故事，是对功能、特性的简单描述。每个特性也可能由很多故事组成。用户故事要简单且容易理解，能在几分钟内通过几行字表述清楚。请注意，用户故事是由项目所有者或主要用户群体来定义的，而非开发者。</p>

<p> 正如Mike Cohnrn所建议的，用户故事应该遵循下面的格式：</p>

<ul>
<li> 引用<br/>
<code>作为一个（某种角色），我需要（某事）如此如此。</code></li>
</ul>


<p> 例如，作为一个用户，我希望通过姓名来查找我的客户。</p>

<p> <strong>工具：</strong>最好的方法是使用索引卡片来记录各个故事。有很多种工具可以帮助完成故事图谱与故事追踪，如 <br/>
 <a href="http://toolsforagile.com/silverstories/">SilverStories</a><br/>
 <a href="http://www.pivotaltracker.com/">Pivotaltracker</a></p>

<p> <strong>注意：</strong>故事并不是一次性完成的，它循环往复，且贯穿于整个项目开发周期中。</p></li>
<li><p><strong>评估你的工作</strong></p>

<p> 在敏捷中，评估用于预测功能实现的复杂程度，并根据以前完成相似复杂度功能的经验预估所需要的完成时间。它是一个持续的过程，基于之前的经验和模式学习，不断提高评估的准确性。</p>

<p> 通常，评估故事的复杂程度多基于故事要点，而非所耗费的时间。要点解释了故事的复杂性，并通过数据1，2，3……来体现。</p>

<p> 评估有助于做出更好的商业决策，定义发布/迭代的范围。例如，我们可以很容易地为每次迭代/发布中的所有故事分配同样的数字。</p>

<p> <strong>工具：</strong><a href="http://www.planningpoker.com/">Planning Poker</a>是定义和改善你评估的最好技术。</p>

<p> <img src="http://techmytalk.files.wordpress.com/2013/07/agile-estimation-chat.jpg" alt="agile-estimation-chat" /></p></li>
<li><p><strong>站立会议</strong></p>

<p>站立会议是开发团队每天进行的简短会议。会上每个人需要说明昨天所完成的事，及今天的计划和被分配任务现在的状态。商业用户和领域专家偶尔也会参加，这将给他们更多关于项目的信心。</p>

<p>它不是例行会议，仅仅对项目实施情况给出粗略的描述，而是要提供更多关于项目的可视性内容，增强团队间的协作，对当天的计划给出正确指导。</p>

<p><strong>工具：</strong>在站立会议中，白板是非常有效的工具。</p></li>
<li><p><strong>项目监控技术</strong></p>

<p><strong>速率：</strong></p>

<p>通过速率，可以精确地测量开发团队发布商业价值的速度。速率是对生产力的测量。通过计算一定间隔内完成工作的单元数来计算速率。</p>

<p>在每次迭代的最后，为了计算速率，敏捷团队会查看该过程所完成的工作要求，并累加与这些要求相关联的故事点。所完成故事点的总数便是团队的速率。首次小小的迭代之后，你会逐渐发现某种趋势，且能计算出平均速率。</p>

<p>下面一些工具可以帮助追踪速率。</p>

<p><a href="http://www.targetprocess.com/">TargetProcess</a><br/>
<a href="http://www.pivotaltracker.com/">Pivotaltracker</a><br/>
<a href="http://slimtimer.com/">Timetracking</a><br/>
<a href="http://www.versionone.com/">VersionOne</a></p>

<p><strong>Burndown Reports：</strong></p>

<p>Burndown  Report是追踪项目进度的另一个标尺。它用来追踪完成故事点的个数，监控简单的迭代、发布和整个项目积压的工作。它可以显示进度，反映产品交付的价值和团队的速率。</p>

<p>以下一些工具可用于测量Burndown Reports：</p>

<p><a href="http://www.targetprocess.com/">TargetProcess</a><br/>
<a href="http://www.xplanner.org/">XPlanner</a><br/>
<a href="http://www.pivotaltracker.com/">Pivotal Tracker</a><br/>
<a href="http://danube.com/scrumworks/basic">ScrumWorks</a></p></li>
</ol>


<p>原文来自：<a href="http://techmytalk.com/2013/07/14/agile-software-development-process/">TechMyTalk</a> / 译：<a href="http://www.csdn.net/article/2013-07-16/2816244">CSDN</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[texture compression]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/06/10/texture-compression/"/>
    <updated>2013-06-10T23:00:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/06/10/texture-compression</id>
    <content type="html"><![CDATA[<p>Texture compression support</p>

<p>Texture compression can significantly increase the performance of your OpenGL application by reducing memory requirements and making more efficient use of memory bandwidth. <!--more-->The Android framework provides support for the ETC1 compression format as a standard feature, including a ETC1Util utility class and the etc1tool compression tool (located in the Android SDK at <code>&lt;sdk&gt;/tools/</code>). For an example of an Android application that uses texture compression, see the CompressedTextureActivity code sample.</p>

<p>The ETC format is supported by most Android devices, but it not guarranteed to be available. To check if the ETC1 format is supported on a device, call the <code>ETC1Util.isETC1Supported()</code> method.</p>

<p>Note: The ETC1 texture compression format does not support textures with an alpha channel. If your application requires textures with an alpha channel, you should investigate other texture compression formats available on your target devices.</p>

<p>Beyond the ETC1 format, Android devices have varied support for texture compression based on their GPU chipsets and OpenGL implementations. You should investigate texture compression support on the devices you are are targeting to determine what compression types your application should support. In order to determine what texture formats are supported on a given device, you must query the device and review the OpenGL extension names, which identify what texture compression formats (and other OpenGL features) are supported by the device. Some commonly supported texture compression formats are as follows:</p>

<p>ATITC (ATC) - ATI texture compression (ATITC or ATC) is available on a wide variety of devices and supports fixed rate compression for RGB textures with and without an alpha channel. This format may be represented by several OpenGL extension names, for example:
GL_AMD_compressed_ATC_texture<br/>
GL_ATI_texture_compression_atitc<br/>
PVRTC - PowerVR texture compression (PVRTC) is available on a wide variety of devices and supports 2-bit and 4-bit per pixel textures with or without an alpha channel. This format is represented by the following OpenGL extension name:<br/>
GL_IMG_texture_compression_pvrtc<br/>
S3TC (DXTn/DXTC) - S3 texture compression (S3TC) has several format variations (DXT1 to DXT5) and is less widely available. The format supports RGB textures with 4-bit alpha or 8-bit alpha channels. This format may be represented by several OpenGL extension names, for example:<br/>
GL_OES_texture_compression_S3TC<br/>
GL_EXT_texture_compression_s3tc<br/>
GL_EXT_texture_compression_dxt1<br/>
GL_EXT_texture_compression_dxt3<br/>
GL_EXT_texture_compression_dxt5<br/>
3DC - 3DC texture compression (3DC) is a less widely available format that supports RGB textures with an an alpha channel. This format is represented by the following OpenGL extension name:
GL_AMD_compressed_3DC_texture<br/>
Warning: These texture compression formats are not supported on all devices. Support for these formats can vary by manufacturer and device. For information on how to determine what texture compression formats are on a particular device, see the next section.</p>

<p>Note: Once you decide which texture compression formats your application will support, make sure you declare them in your manifest using <code>&lt;supports-gl-texture&gt;</code> . Using this declaration enables filtering by external services such as Google Play, so that your app is installed only on devices that support the formats your app requires. For details, see OpenGL manifest declarations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Last day]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/05/24/lizhiganxiang/"/>
    <updated>2013-05-24T09:31:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/05/24/lizhiganxiang</id>
    <content type="html"><![CDATA[<p>今日离职。</p>

<!--more-->


<p>从2005年1月到现在，进入九城已8年有余，今天终于要离开了。
九城是我大学毕业后的第一家公司。
我是幸运的，九城就像一个大家庭，给人关怀和温暖。从一个实习生到现在的开发经理，被评过优秀员工，职位和工资上的变化，自知并不是因为水平有多高，乃是领导给我的鼓励和各位同事一直以来的帮助和包容。我也一直夹紧尾巴，严于律己，仍在不断学习，实在不忍辜负各位对我的殷切期望。<br/>
从某个角度说，我又是不幸的。8年来参与开发的两款游戏和几个手机项目，都没有获得成功，实在有愧于领导和同事们。于是，逐渐开始产生怀疑，1到底是不是入错行了？2工作的快乐吗？1没有。2虽然没有成功，但自己不断提高和认清自我的过程是快乐的。平时多问问自己。<br/>
作为一个性格内向的技术宅，一直梦想有朝一日成为少林寺的扫地僧，成为一名深藏不露的高手，在自己不知名的博客里写上大段别人看不懂的文章。深藏不露已经做到了，高手还远得很。但身边就有好几位这样的大神，向他们学习。<br/>
知名科幻小说家Cory Doctorow曾说：“铁匠在啤酒中洒下眼泪，悲叹自己没有办法在铁路时代卖马掌，但这并不会使他们的马掌更受欢迎。那些学习变成机械师的铁匠才会保住自己的饭碗。”个人也好，团队也好，唯有快速顺应时代才能赢得未来，必须因时代而变。科技真的可以改变生活，看看宝马车里那套不断升级的多媒体智能系统。多了解一些最新的知识吧。</p>

<p>8年间，毕业了，结婚了，有了孩子，长辈不断老去，生活发生了重大的变化，才明白家人比工作更需要你的陪伴。多了解一些时间管理的知识，治好自己的拖延症，使得工作更高效，才能给生活留足充裕的时间。</p>

<p>潮起潮落，时光飞逝，蹉跎的是岁月，流逝的是时光。<br/>
头发掉了，身体差了，精力少了，青春走了。面对选择，终究要做出取舍。<br/>
人生如梦，亦如幻。待调整好状态，重拾旧山河。</p>

<p>放下张江男的称号，与那些加班的夜晚告别，再也领不到魔兽鼠标垫和各种T，也不用为9点05分刷卡而奔跑，很难描述有多不舍。</p>

<p>特别鸣谢：李栋，Chris，秦总，赵总，以及渠道中心技术团队一直以来全方位的照顾和支持，让我成长了很多。还有原来TDC以及九城游戏中心的各位领导和同事，虽然他们收不到邮件，但希望能在遥远的地方感受到我的谢意。</p>

<p>欢迎各位有空跟我聊天，上至天文，下至地理，横贯古今都可以，当然，技术类的更好。</p>

<p>祝大家万事如意，身体健康。一定要幸福哟！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intents and Intent filters]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/05/07/intent-and-intent-filter/"/>
    <updated>2013-05-07T15:26:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/05/07/intent-and-intent-filter</id>
    <content type="html"><![CDATA[<h1>Intent和Intent过滤器:</h1>

<p>英文原文：<a href="http://developer.android.com/guide/topics/intents/intents-filters.html">http://developer.android.com/guide/topics/intents/intents-filters.html</a><br/>
版本：Android 4.0 r1<br/>
译者署名：Rongqi Fan<br/>
译者链接：</p>

<!--more-->


<p>程序的3个核心组件——Activity、services、广播接收器——是通过intent传递消息的。intent消息对于运行时绑定不同的组件是很方便的，这些组件可以是同一个程序也可以是不同的。一个intent对象，是一个被动的数据结构，它保存了一个操作的抽象描述——或通常是一个广播的实例，一些发生的事情的描述，一个通知。传递intent到不同组件的机制是互不相同的。</p>

<ul>
<li>intent对象是传递给Context.startActivity() 或Activity.startActivityForResult() 以启动Activity或是让一个存在的Activity做些事情。（也可以传递给Activity.setResult()来返回Activity的信息，这个函数叫startActivityForResult()。）</li>
<li>intent对象传递给函数来初始化一个service或是分发一个新的指令给一个正在进行的service。同样，intent传递给来建立一个在调用组件和目标service间的联系。如果一个service没有运行，它可以开始它。</li>
<li>intent可以传递给任何广播函数（如：Context.sendBroadcast()、Context.sendOrderedBroadcast()、 Context.sendStickyBroadcast()），intent被分派给所有感兴趣的广播接收者。很多广播源在系统内核里。</li>
</ul>


<p>Android系统会寻找合适的Activity、service或设置广播接收器来响应intent，在需要的时候实例化它们。在消息系统里没有交叠：广播intent仅仅分派给广播接收器，不会分派给Activity或service。一个intent分派给startActivity()仅仅分派给Activity，不会分派给service或广播接收器，等等。</p>

<p>本文档先描述intent对象。然后描述Activity把intent映射到组件的规则——如何解决什么组件如何接收一个intent消息。没有显示指明目标组件的intent，进程通过intent过滤器测试intent对象来决定潜在的接收者。</p>

<h2>intent对象</h2>

<p>intent对象是一个信息桶。它包含了接收它的组件感兴趣的信息（如：携带的动作和数据），附加Android系统感兴趣的信息（如：处理intent和启动目标Activity指令的组件的类别）。主要包含如下信息：</p>

<h3>组件名</h3>

<p>处理intent的组件的名字。这个域是一个对象——包含了目标组件的全名（如：）包含在manifest文件里设置的组件驻留的包名（如：）。组件名的包的名不需要和在manifest文件里设置的包名匹配。</p>

<p>组件名是可选的。如果设置了，intent对象分派到目的类的实例。如果不设置，Android使用intent的其它信息来本地化合适的目标——阅读本文后面的 Intent Resolution部分。</p>

<p>组件的名字通过函数setComponent()、setClass()、setClassName()设置，通过函数读取getComponent()。</p>

<h3>动作</h3>

<p>需要执行的动作的名字——或在广播intent里，发生动作并且被报告。intent类定义动作的常量，如下：</p>

<table>
<tr>
   <th>Constant</th>
   <th>Target component</th>
   <th>Action</th>
</tr><tr>
   <td><code>ACTION_CALL</code>
   <td>activity
   <td>Initiate a phone call.
</tr><tr>
   <td><code>ACTION_EDIT</code>
   <td>activity
   <td>Display data for the user to edit.
</tr><tr>
   <td><code>ACTION_MAIN</code>
   <td>activity
   <td>Start up as the initial activity of a task, with no data input and no returned output.
</tr><tr>
   <td><code>ACTION_SYNC</code>
   <td>activity
   <td>Synchronize data on a server with data on the mobile device.
</tr><tr>
   <td><code>ACTION_BATTERY_LOW</code>
   <td>broadcast receiver
   <td>A warning that the battery is low.
</tr><tr>
   <td><code>ACTION_HEADSET_PLUG</code>
   <td>broadcast receiver
   <td>A headset has been plugged into the device, or unplugged from it.
</tr><tr>
   <td><code>ACTION_SCREEN_ON</code>
   <td>broadcast receiver
   <td>The screen has been turned on.
</tr><tr>
   <td><code>ACTION_TIMEZONE_CHANGED</code>
   <td>broadcast receiver
   <td>The setting for the time zone has changed.
</tr>
</table>


<p>阅读intent类的描述，关于为产生动作而预定义的常量。其它动作被定义于Android的API。你可以在自己的程序里定义自己的动作字符串来激活组件。你的这些发明，需要包含程序包作为前缀——例如：com.example.project.SHOW_COLOR。</p>

<p>动作定义了intent是什么样的结构——指定数据和扩展域——如一个函数名决定一个参数集、一个返回值。由于这个原因，使用动作名的好方法是尽可能的明确，它们配对的和intent里的其它域不一样。换句话说，不是孤立的定义动作，而是定义一个协议以便你的组件可以处理intent对象。</p>

<p>intent里的动作是通过 setAction()函数设置，通过getAction()函数读取。</p>

<h3>数据</h3>

<p>数据的URI和MIME类型的数据。不同的动作和不同的数据配对。例如：如果动作域是ACTION_EDIT，数据域需要包含文档的URI以便显示，编辑。如果动作是ACTION_CALL，数据域需要是一个带拨号的号码的tel: URI。相同的，如果动作是ACTION_VIEW数据域是http: URI，接收Activity需要调用并下载、显示URI引用的任何数据。</p>

<p>intent和组件匹配是处理数据的能力，它通常是从附加在URI的信息知道数据类型的（数据的MIME类型）。例如：组件能显示图形数据不能用来播放音频文件。</p>

<p>很多时候，数据类型可以通过URI推断——但是 content:URI特殊，它指示数据数据被本地化于设备并通过一个内容提供者来控制（阅读separate discussion on content providers）。但是，这种类型还是可以显示的在intent里设置。setData() 函数指定数据作为一个URI， setType()指定它为一个MIME类型，setDataAndType()指定它是URI也是MIME类型。 getData()函数读取URI， getType()读取类型。</p>

<h3>类型</h3>

<p>包含附加信息的字符串，信息是需要处理intent的组件的类型。任何类型的数字描述可以放入intent对象。就像对动作一样，intent类定义一些类常量，包括：</p>

<p>** 这里有表格</p>

<table>
<tr>
   <th>Constant</th>
   <th>Meaning</th>
</tr><tr>
   <td><code>CATEGORY_BROWSABLE</code>
   <td>The target activity can be safely invoked by the browser to display data 
       referenced by a link &mdash; for example, an image or an e-mail message.
</tr><tr>
   <td><code>CATEGORY_GADGET</code>
   <td>The activity can be embedded inside of another activity that hosts gadgets.
</tr><tr>
   <td><code>CATEGORY_HOME</code>
   <td>The activity displays the home screen, the first screen the user sees when 
       the device is turned on or when the <em>Home</em> button is pressed.
</tr><tr>
   <td><code>CATEGORY_LAUNCHER</code>
   <td>The activity can be the initial activity of a task and is listed in 
       the top-level application launcher.
</tr><tr>
   <td><code>CATEGORY_PREFERENCE</code>
   <td>The target activity is a preference panel.
</tr>
</table>


<p></p>

<p>阅读intent类的描述，里面有完整的类别列表。</p>

<p>addCategory() 放置一个intent里的类别，removeCategory()删除之前添加的，getCategories()获取当前所有的类别。</p>

<h3>扩展</h3>

<p>附加键值对信息，这个键值会分派给处理intent的组件。一些动作和特定的数据URI匹配，一些和特定的扩展匹配。例如：一个ACTION_TIMEZONE_CHANGED的intent有一个time-zone扩展域指明新的时区，ACTION_HEADSET_PLUG有一个state扩展的状态域指明耳机插入或拔出，name也有一个域来指明耳机的类型。如果你发明一个动作SHOW_COLOR ，颜色值在扩展键值对里设置。</p>

<p>intent有一系列的put&#8230;() 函数来插入各种类型的数据和一系列get&#8230;()函数来获取各种类型的数据。对Bundle 对象，这些函数是并行的。事实上，可以使用函数<code>putExtras()</code>和函数<code>getExtras()</code>来把数据作为Bundle读取、插入。</p>

<h3>标志</h3>

<p>各种排序的标志。指示Android如何启动Activity（例如：Activity属于那个任务）启动后如何处理（例如：是否属于现在Activity 的列表）。这些标志在intent类里定义。</p>

<p>和平台相关的Android系统和程序使用intent来发送系统的广播、激活系统定义的组件。和intent激活系统组件相关的内容，在list of intents 。</p>

<h2>intent解决</h2>

<p>intent可以分为两类：</p>

<ul>
<li><p>通过名字指定目标组件（阅读component name field，文档里有一个值的集合）。其它程序的开发人员不需要知道组件名，显式的intent用于程序内部消息——如：Activity启动一个下属服务或启动一个姊妹Activity。</p></li>
<li><p>隐式intent没有命名一个目标（组件名是空的），隐式intent通常用来激活其它程序的组件。
Android分派一个显式的intent给指定目标类的实例。除了intent对象，没可以匹配获取intent组件的组件名。</p></li>
</ul>


<p>隐式intent需要不同的策略。没有指定目标，Android系统需要查找最适合处理intent的组件（或几个组件）——一个单一的Activity或服务来执行请求的动作或设置广播接收器来响应广播通知。通过把intent对象的内容和intent管理器比较，判断那个组件是潜在的接收者。过滤器提供组件的能力并且划定它可以处理的intent。它开启可以接收隐式intent的组件类型。如果组件没有intent过滤器，它仅仅可以接收显式的intent。含有过滤器的组件既可以接收隐式intent也可以接收显式intent。</p>

<p>intent过滤器里测试intent对象的三个方面：<br/>
* 动作<br/>
* 数据（URI和数据类型）<br/>
* 类别</p>

<p>通过扩展和标志不可以确定那个组件接收intent。</p>

<h3>intent过滤器</h3>

<p>为了通知系统那个组件、Activity，service，广播过滤器可以处理intent，系统可以有多个intent过滤器。每个过滤器描述一个组件的能力，一个不处理的intent集合——仅仅是不处理隐式intent（这些不命名一个目标类）。一个显示intent总是分派给它的目标，不管它包含什么内容；过滤器这个时候不起作用。但是一个隐式intent仅当它可以通过一个组件的过滤器，次才被分派给这个组件。</p>

<p>组件区分每个过滤器的功能，每个展示给用户的界面，例如：Note Pad程序的Activity有两个过滤器——一个启动一个指定的note，用户可以看或编辑，另一个启动一个新建的、空的note，用户可以编辑并且保存。（Note Pad所有的过滤器在Note Pad Example 一节里有描述。）</p>

<h4>过滤器和安全性</h4>

<p>Intent过滤器没有可靠的安全性。当它打开一个接收处理显式intent的组件，它并没有阻止隐式intent。尽管一些过滤器限制组件可以处理哪些动作和数据，有时额可以吧不同的动作和数据放入一个显式的intent，并把组件作为目标。</p>

<p>Intent过滤器是<code>IntentFilter</code>类的实例。然而，Android系统在启动组件前必须知道组件的能力，intent过滤器是在manifest文件<code>AndroidManifest.xml</code>里作为<code>&lt;intent-filter&gt;</code> 元素建立而不是在java代码里。（有一个特例是：广播接收器的过滤器，它是通过<code>Context.registerReceiver()</code>函数动态的注册；它被作为IntentFilter对象创建。）</p>

<p>一个过滤器有动作域、数据域、intent对象类别域。一个显式的intent测试这三个域。并派送给拥有过滤器的组件，必须通过三个测试。如果有一个测试失败，Android系统都不会分派——至少不是过滤器的基础。然而，如果组件有多个intent过滤器，不分派给一个组件也会分派给另一个组件。</p>

<p>以上三个测试的细节如下：</p>

<p>动作测试
manifest文件里的<code>&lt;intent-filter&gt;</code>元素作为 <code>&lt;action&gt;</code> 子元素列举动作。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;intent-filter . . . &gt;
</span><span class='line'>    &lt;action android:name="com.example.project.SHOW_CURRENT" /&gt;
</span><span class='line'>    &lt;action android:name="com.example.project.SHOW_RECENT" /&gt;
</span><span class='line'>    &lt;action android:name="com.example.project.SHOW_PENDING" /&gt;
</span><span class='line'>    . . .
</span><span class='line'> &lt;/intent-filter&gt;</span></code></pre></td></tr></table></div></figure>


<p>就像例子显示的，当一个intent对象名仅仅是一个单独的动作，一个过滤器列举更多。这个列表不可以为空；管理器至少需要包含一个<code>&lt;action&gt;</code>元素，或它将阻止所有的intent。</p>

<p>传递这个测试，在intent里指定的动作必须匹配管理器列表里的动作。如果对象或过滤器不指定动作，结果如下：</p>

<p>如果过滤器列举动作失败，没有和intent匹配的动作，因此所有的intent测试都失败。没有intent可以打通这个管理器。</p>

<p>另一方面，intent对象不知道一个动作，并自动的传递测试——只要过滤器包含至少一个动作。</p>

<p>类型测试</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;intent-filter&gt; 元素列举类别作为子元素。例如：
</span><span class='line'> &lt;intent-filter . . . &gt;
</span><span class='line'>    &lt;category android:name="android.intent.category.DEFAULT" /&gt;
</span><span class='line'>    &lt;category android:name="android.intent.category.BROWSABLE" /&gt;
</span><span class='line'>    . . .
</span><span class='line'> &lt;/intent-filter&gt;</span></code></pre></td></tr></table></div></figure>


<p>注意：常量描述的动作和类别在manifest文件里没有使用。使用的是完整的字符串。例如：上面例子里的字符串android.intent.category.BROWSABLE反映的是本文档之前提到的常量CATEGORY_BROWSABLE 。同样地，字符串android.intent.action.EDIT反映的是常量ACTION_EDIT。</p>

<p>传递一个intent给类别测试，每个intent里的类别需要匹配一个过滤器里的类别。过滤器列举附加的类别，但是它不可以忽略任何intent里的类别。</p>

<p>因此，一个没有类别的intent对象总是可以通过测试，不论过滤器里是什么内容。大多数情况是这样。然而，有一个特例，Android处理传递给startActivity()的显式intent就像它包含了一个类别：android.intent.category.DEFAULT（ CATEGORY_DEFAULT常量）。因此，想接收显式intnet的Activity需要在intent过滤器里包含。（设置了android.intent.action.MAIN和android.intent.category.LAUNCHER的过滤器是特殊情况。它们把Activity标记为任务前运行，并且会在启动画面上显示。它们在类别列表里包含android.intent.category.DEFAULT，但是并不必须。）更多过滤器请阅读 Using intent matching。</p>

<p>数据测试
和动作、类别一样，intent过滤器指定的数据包含一个子元素。这种情况下，子元素可以多次出现，或不出现。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;intent-filter . . . &gt;
</span><span class='line'>    &lt;data android:mimeType="video/mpeg" android:scheme="http" . . . /&gt; 
</span><span class='line'>    &lt;data android:mimeType="audio/mpeg" android:scheme="http" . . . /&gt;
</span><span class='line'>    . . .
</span><span class='line'> &lt;/intent-filter&gt;</span></code></pre></td></tr></table></div></figure>


<p>每个<data> 元素可以指定一个URI和一个数据类型（MIME类型）。有各种属性——scheme、host、port、path ——是URI的每个部分：</p>

<p> <code>scheme://host:port/path</code></p>

<p>例如：下面的URI
 <code>content://com.example.project:200/folder/subfolder/etc</code></p>

<p>方案是<code>content</code>，主机是<code>com.example.project</code>，端口是<code>200</code>，路径是<code>folder/subfolder/etc</code>。主机和端口构成URIauthority；如果主机没有指定，端口也忽略了。</p>

<p>每个属性都是可选的，但是它们并不是独立的；一个authority哟啊有意义，一个方案需要被指定。一个路径要有意义，一个方案和authority需要被指定。</p>

<p>当intent对象里的URI和过滤器里指定的URI比较的时候，仅仅比较过滤器里有的部分。例如：如果过滤器仅仅指定方案，匹配方案的URI都符合条件。如果过滤器指定方案、权限没有指定路径，那么忽略路径的情况下，和方案、权限匹配的URI都符合条件。如果过滤器指定方案、权限、路径，仅当方案、权限、路径都匹配的时候才符合。然而，一个路径里包含宽字符仅需要部分匹配。</p>

<p><code>&lt;data&gt;</code>元素的type 属性指定数据的MIME类型。一般在过滤器里的情况比在URI里多。Intent对象和过滤器可以使用*来表示子域——例如：<code>text/*</code>或<code>audio/*</code>——表示匹配任何子域。</p>

<p>数据测试对比intent对象里的URI和数据类型和过滤器里的。规则如下：</p>

<p>a.仅仅当过滤器不指定任何URI或数据类型的时候，才会把一个没有包含URI或数据类型的intent对象传递给测试。</p>

<p>b.仅仅如它的URI匹配一个过滤器里的URI并且过滤器没有指定类型（这个类型不可以通过URI推断），会把一个包含URI不包含数据类型的intent传递给测试。这种情况仅出现于URI如<code>mailto:</code> 和<code>tel:</code>这样不引用实际数据的情况。</p>

<p>c.如果过滤器列出相同的数据类型并不指定URI，一个包含数据类型不包含URI的intent会传递给测试。</p>

<p>d．包含URI和数据类型的intent对象（或可以通过URI推断数据类型）如果它的类型和过滤器的类型的列表你的匹配，那么就测试数据类型部分。如果它的URI和过滤器列表的匹配，或包含<code>content:</code>、<code>file:</code>、没有指定URI，那么就测试URI部分。换句话说，组件可以断定如果过滤器列表仅仅有数据类型那么它支持<code>content:</code> 和 <code>file:</code>数据。</p>

<p>如果intent通过过滤器传递几个Activity或服务，会询问用户激活那个组件。如果没有发现目标会产生一个异常。</p>

<p>通常的例子
上面最后一条规则，规则（d）显示了我们希望组件可以从一个文件或内容提供者李获取局部数据。因此，它们的过滤器仅需要列出数据类型，不需要显示的指定主题名为 <code>file:</code> 或 <code>content:</code>。这是特例。 <code>&lt;data&gt;</code>元素如下，将告诉Android系统组件可以从内容提供者里获取图片数据并且显示出来：
 <code>&lt;data android:mimeType="image/*" /&gt;</code></p>

<p>通常情况，很多有效的数据被内容提供者，指定数据类型但没有指定URI的过滤器免除。</p>

<p>另一个通常的配置项是有方案和数据类型的过滤器。例如：如下一个元素<code>&lt;data&gt;</code>告诉Android系统组件可以从网络上获取视频数据并且显示：</p>

<p> <code>&lt;data android:scheme="http" android:type="video/*" /&gt;</code></p>

<p>考虑这样一个例子：一个浏览器应用在用户点击一个网络链接的时候。它会试着显示数据（这个连接是一个HTML页）。如果它不能显示数据，它把方案和数据类型放入一个显式的intent并且用它来启动可以实现这个功能的Activity。如果仍不行，它调用下载管理器来下载数据。并且让内容管理器来控制，因此会请求一个潜在的更大的Activity池（这些管理器仅仅命名了数据类型）。</p>

<p>许多程序在没有引用任何特殊数据的时候可以启动一个新的。Activity可以初始化一个有把<code>android.intent.action</code>.MAIN指定为动作的过滤器。如果它们在程序启动时显示，它们也指定类别<code>android.intent.category.LAUNCHER</code>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;intent-filter . . . &gt;
</span><span class='line'>    &lt;action android:name="code android.intent.action.MAIN" /&gt;
</span><span class='line'>    &lt;category android:name="code android.intent.category.LAUNCHER" /&gt;
</span><span class='line'> &lt;/intent-filter&gt;</span></code></pre></td></tr></table></div></figure>


<h3>使用intent匹配</h3>

<p>通过intent和intent过滤器的匹配，不仅可以发现目标组件，还可以发现设备上的组件集。例如：Android系统启动程序，顶层屏幕显示用户启动的程序，查找intent过滤器指定<code>android.intent.action.MAIN</code>动作和<code>android.intent.category.LAUNCHER</code>类别（前一节有说明）的Activity。然后显示图标并且标记这些Activity。同样地，它通过查找过滤器里有<code>android.intent.category.HOME</code>的Activity来发现home屏幕。</p>

<p>你的程序可以使用相同的思路来匹配。<code>PackageManager</code>有一系列<code>query...()</code>函数可以返回intent可以访问的所有组件，一系列<code>resolve...()</code>函数来决定那个是最适合相应intent的组件。例如：<code>queryIntentActivities()</code>返回可以处理intent的Activity，<code>queryIntentServices()</code>函数返回服务列表。；它们仅仅列出可以响应的那个。有一个类似的函数，<code>queryBroadcastReceivers()</code>，广播接受者使用的。</p>

<h2>例子：Note Pad</h2>

<p>Note Pad是一个简单的允许用户浏览note列表，查看每一项细节，编辑每个note，添加一个新的note的程序。查看manifest文件里intent过滤器的声明。（如果你用离线的SDK，你可以看到这个程序的所有源代码，包括manifest文件，路径是：<code>&lt;sdk&gt;/samples/NotePad/index.html</code>。如果你查阅在线文档，源代码在：Tutorials and Sample Code 。）</p>

<p>在它的manifest文件里，Note Pad程序声明了三个Activity，每个都有一个intent过滤器。也声明一个内容提供者来管理note数据。Manifest文件如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>          package="com.example.android.notepad"&gt;
</span><span class='line'>    &lt;application android:icon="@drawable/app_notes"
</span><span class='line'>                 android:label="@string/app_name" &gt;
</span><span class='line'>
</span><span class='line'>        &lt;provider android:name="NotePadProvider"
</span><span class='line'>                  android:authorities="com.google.provider.NotePad" /&gt;
</span><span class='line'>
</span><span class='line'>        &lt;activity android:name="NotesList" android:label="@string/title_notes_list"&gt;
</span><span class='line'>            &lt;intent-filter&gt;
</span><span class='line'>                &lt;action android:name="android.intent.action.MAIN" /&gt;
</span><span class='line'>                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
</span><span class='line'>            &lt;/intent-filter&gt;
</span><span class='line'>            &lt;intent-filter&gt;
</span><span class='line'>                &lt;action android:name="android.intent.action.VIEW" /&gt;
</span><span class='line'>                &lt;action android:name="android.intent.action.EDIT" /&gt;
</span><span class='line'>                &lt;action android:name="android.intent.action.PICK" /&gt;
</span><span class='line'>                &lt;category android:name="android.intent.category.DEFAULT" /&gt;
</span><span class='line'>                &lt;data android:mimeType="vnd.android.cursor.dir/vnd.google.note" /&gt;
</span><span class='line'>            &lt;/intent-filter&gt;
</span><span class='line'>            &lt;intent-filter&gt;
</span><span class='line'>                &lt;action android:name="android.intent.action.GET_CONTENT" /&gt;
</span><span class='line'>                &lt;category android:name="android.intent.category.DEFAULT" /&gt;
</span><span class='line'>                &lt;data android:mimeType="vnd.android.cursor.item/vnd.google.note" /&gt;
</span><span class='line'>            &lt;/intent-filter&gt;
</span><span class='line'>        &lt;/activity&gt;
</span><span class='line'>        
</span><span class='line'>        &lt;activity android:name="NoteEditor"
</span><span class='line'>                  android:theme="@android:style/Theme.Light"
</span><span class='line'>                  android:label="@string/title_note" &gt;
</span><span class='line'>            &lt;intent-filter android:label="@string/resolve_edit"&gt;
</span><span class='line'>                &lt;action android:name="android.intent.action.VIEW" /&gt;
</span><span class='line'>                &lt;action android:name="android.intent.action.EDIT" /&gt;
</span><span class='line'>                &lt;action android:name="com.android.notepad.action.EDIT_NOTE" /&gt;
</span><span class='line'>                &lt;category android:name="android.intent.category.DEFAULT" /&gt;
</span><span class='line'>                &lt;data android:mimeType="vnd.android.cursor.item/vnd.google.note" /&gt;
</span><span class='line'>            &lt;/intent-filter&gt;
</span><span class='line'>            &lt;intent-filter&gt;
</span><span class='line'>                &lt;action android:name="android.intent.action.INSERT" /&gt;
</span><span class='line'>                &lt;category android:name="android.intent.category.DEFAULT" /&gt;
</span><span class='line'>                &lt;data android:mimeType="vnd.android.cursor.dir/vnd.google.note" /&gt;
</span><span class='line'>            &lt;/intent-filter&gt;
</span><span class='line'>        &lt;/activity&gt;
</span><span class='line'>        
</span><span class='line'>        &lt;activity android:name="TitleEditor" 
</span><span class='line'>                  android:label="@string/title_edit_title"
</span><span class='line'>                  android:theme="@android:style/Theme.Dialog"&gt;
</span><span class='line'>            &lt;intent-filter android:label="@string/resolve_title"&gt;
</span><span class='line'>                &lt;action android:name="com.android.notepad.action.EDIT_TITLE" /&gt;
</span><span class='line'>                &lt;category android:name="android.intent.category.DEFAULT" /&gt;
</span><span class='line'>                &lt;category android:name="android.intent.category.ALTERNATIVE" /&gt;
</span><span class='line'>                &lt;category android:name="android.intent.category.SELECTED_ALTERNATIVE" /&gt;
</span><span class='line'>                &lt;data android:mimeType="vnd.android.cursor.item/vnd.google.note" /&gt;
</span><span class='line'>            &lt;/intent-filter&gt;
</span><span class='line'>        &lt;/activity&gt;
</span><span class='line'>        
</span><span class='line'>    &lt;/application&gt;
</span><span class='line'>&lt;/manifest&gt;</span></code></pre></td></tr></table></div></figure>


<p>第一个Activity，NoteList，和其它Activity不同，它操作一个note的目录（note列表）而不是一个单一的note。通常是充当程序的初始化界面。它额可以依据下面三个intent过滤器来做三件事。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;intent-filter&gt;
</span><span class='line'>    &lt;action android:name="android.intent.action.MAIN" /&gt;
</span><span class='line'>    &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
</span><span class='line'> &lt;/intent-filter&gt;</span></code></pre></td></tr></table></div></figure>


<p>这个过滤器声明指向Note Pad程序的实体。标准动作是一个在intent里不需要任何信息（比如：没有数据）的实体点，类别说的是实体点需要在程序的启动里列出。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;intent-filter&gt;
</span><span class='line'>    &lt;action android:name="android.intent.action.VIEW" /&gt;
</span><span class='line'>    &lt;action android:name="android.intent.action.EDIT" /&gt;
</span><span class='line'>    &lt;action android:name="android.intent.action.PICK" /&gt;
</span><span class='line'>    &lt;category android:name="android.intent.category.DEFAULT" /&gt;
</span><span class='line'>    &lt;data android:mimeType="vnd.android.cursor.dir/vnd.google.note" /&gt;
</span><span class='line'> &lt;/intent-filter&gt;</span></code></pre></td></tr></table></div></figure>


<p>这个过滤器声明Activity可以对节点做的事情。允许用户浏览或编辑词典（通过<code>VIEW</code> 和<code>EDIT</code> 动作），或是获取节点（通过<code>PICK</code> 动作）。</p>

<p><code>&lt;data&gt;</code> 元素的mimeType属性指定这些动作操作的数据类型。它指示了Activity可以从保存Note Pad数据（<code>vnd.google.note</code>）的内容提供者里获取零个或多个Cursor项（<code>vnd.android.cursor.dir</code>）。启动Activity的intent需要包含一个 <code>content:URI</code>来指定Activity需要打开的扩展数据。</p>

<p>主要这个过滤器里指定了<code>DEFAULT</code>类别。因为<code>Context.startActivity()</code> 和<code>Activity.startActivityForResult()</code>函数处理所有的intent就像它们包含<code>DEFAULT</code>类别——仅仅有两个特例：</p>

<ul>
<li>显式知道目标Activity的intent。</li>
<li>包含MAIN 动作和LAUNCHER 类别的intent。</li>
</ul>


<p>因此，<code>DEFAULT</code> 类别需要所有的过滤器——处理有动作<code>MAIN</code> 和类别<code>LAUNCHER</code> 的。（intent过滤器不需要显示的intent。）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;intent-filter&gt;
</span><span class='line'>    &lt;action android:name="android.intent.action.GET_CONTENT" /&gt;
</span><span class='line'>    &lt;category android:name="android.intent.category.DEFAULT" /&gt;
</span><span class='line'>    &lt;data android:mimeType="vnd.android.cursor.item/vnd.google.note" /&gt;
</span><span class='line'> &lt;/intent-filter&gt;</span></code></pre></td></tr></table></div></figure>


<p>过滤器描述了Activity可以翻译一个用户选中的note，用户没有从指定的目录里查询。
动作和动作是类似的。Activity返回用户选中的note的URI。（调用<code>startActivityForResult()</code>启动NoteList Activity，）然而，调用者指定数据类型，而不是用户从目录里获取数据类型。</p>

<p>数据类型，<code>vnd.android.cursor.item/vnd.google.note</code>，指明了Activity可以返回的数据类型——一个独立的节点的<code>URI</code>。从返回的<code>URI</code>，调用者可以从保存Note Pad 数据（<code>vnd.google.note</code>）的内容提供者里获取一个项的Cursor（<code>vnd.android.cursor.item</code>）</p>

<p>换句话说，之前过滤器里的<code>PICK</code> 动作，数据类型暗示了Activity显示给用户的数据类型。对于<code>GET_CONTENT</code>过滤器，它指示了Activity可以返回给调用者的数据类型。</p>

<p>给定这些功能，下面的intent将解决NotePad Activity：</p>

<p>动作：<code>android.intent.action.MAIN</code>
没有数据指定的情况下启动Activity。</p>

<p>动作：<code>android.intent.action.MAIN</code>
类别：<code>android.intent.category.LAUNCHER</code>
没有数据选择域的情况启动Activity。</p>

<p>动作：<code>android.intent.action.VIEW</code>
数据：<code>content://com.google.provider.NotePad/notes</code>
调用Activity显示<code>content://com.google.provider.NotePad/notes</code>下note的列表。用户可以通过列表浏览和获取没一个项的信息。</p>

<p>动作：<code>android.intent.action.PICK</code>
数据：<code>content://com.google.provider.NotePad/notes</code>
调用Activity来显示<code>content://com.google.provider.NotePad/notes</code>下的note的列表。用户可以从列表里选择一note，Activity将返回该项的URI来启动一个NoteList Activity。</p>

<p>动作： <code>android.intent.action.GET_CONTENT</code>
数据类型：<code>vnd.android.cursor.item/vnd.google.note</code>
调用Activity来提供一个单独的Note Pad数据项。</p>

<p>第二个Activity，NoteEditor，显示一个note给用户，并且允许用户编辑。在intent的过滤器里描述了它可以做的两件事情：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;intent-filter android:label="@string/resolve_edit"&gt;
</span><span class='line'>    &lt;action android:name="android.intent.action.VIEW" /&gt;
</span><span class='line'>    &lt;action android:name="android.intent.action.EDIT" /&gt;
</span><span class='line'>    &lt;action android:name="com.android.notepad.action.EDIT_NOTE" /&gt;
</span><span class='line'>    &lt;category android:name="android.intent.category.DEFAULT" /&gt;
</span><span class='line'>    &lt;data android:mimeType="vnd.android.cursor.item/vnd.google.note" /&gt;
</span><span class='line'> &lt;/intent-filter&gt;</span></code></pre></td></tr></table></div></figure>


<p>Activity的第一个、最基本的功能是允许用户和一个note交互——或者浏览或者编辑。（EDIT_NOTE类对EDIT来说是一个。）intent需要包含和数据的URI并和MIME类型<code>vnd.android.cursor.item/vnd.google.note</code>匹配——URI是独立的、指定note的URI。需要是一个通过<code>PICK</code> 或<code>GET_CONTENT</code>动作从NoteList Activity里返回的URI。过滤器列出了<code>DEFAULT</code> 因此Activity可以通过intent来启动，这个intent没有显示的指定NoteEditor类。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;intent-filter&gt;
</span><span class='line'>    &lt;action android:name="android.intent.action.INSERT" /&gt;
</span><span class='line'>    &lt;category android:name="android.intent.category.DEFAULT" /&gt;
</span><span class='line'>    &lt;data android:mimeType="vnd.android.cursor.dir/vnd.google.note" /&gt;
</span><span class='line'> &lt;/intent-filter&gt;</span></code></pre></td></tr></table></div></figure>


<p>Activity的第二个作用是允许用户创建新的note，并插入到已有的note字典里。Intent需要包含和数据的<code>URI</code>匹配的MIME类型<code>vnd.android.cursor.dir/vnd.google.note</code> ——词典的<code>URI</code>需要被替换。</p>

<p>给定这些功能，接下来的intent可以NoteEditor的Activity：</p>

<p>动作：<code>android.intent.action.VIEW</code>
数据：<code>content://com.google.provider.NotePad/notes/ID</code>
调用Activity显示通过ID指定的note的内容。（关于 <code>content:URI</code>指定群成员的细节知识，阅读Content Providers。）</p>

<p>动作：<code>android.intent.action.EDIT</code>
数据：<code>content://com.google.provider.NotePad/notes/ID</code>
调用Activity来显示通过ID 标识的note的内容。如果用户保存修改，Activity更新在内容提供者里的note的数据。</p>

<p>动作：<code>android.intent.action.INSERT</code>
数据：<code>content://com.google.provider.NotePad/notes</code>
调用Activity在 <code>content://com.google.provider.NotePad/notes</code> 的note列表里创建一个新的、空的note。允许用户编辑它。如果用户保存note，note的<code>URI</code>返回给调用者。</p>

<p>最后一个Activity，TitleEditor，允许用户编辑note的标题。通过调用Activity（显式的设置它的intent的组件名）来实现，而不是使用intent过滤器。展示如何对已经存在的数据执行操作：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;intent-filter android:label="@string/resolve_title"&gt;
</span><span class='line'>    &lt;action android:name="com.android.notepad.action.EDIT_TITLE" /&gt;
</span><span class='line'>    &lt;category android:name="android.intent.category.DEFAULT" /&gt;
</span><span class='line'>    &lt;category android:name="android.intent.category.ALTERNATIVE" /&gt;
</span><span class='line'>    &lt;category android:name="android.intent.category.SELECTED_ALTERNATIVE" /&gt;
</span><span class='line'>    &lt;data android:mimeType="vnd.android.cursor.item/vnd.google.note" /&gt;
</span><span class='line'> &lt;/intent-filter&gt;</span></code></pre></td></tr></table></div></figure>


<p>这个intent过滤器可以使用一个用户定义的名为<code>com.android.notepad.action.EDIT_TITLE</code>的动作。调用一个指定的note（数据类型是<code>vnd.android.cursor.item/vnd.google.note</code>），如之前的<code>VIEW</code> 和<code>EDIT</code> 动作。然而，Activity显示包含着note数据里的标题，不包含note内容本身。</p>

<p>支持类<code>DEFAULT</code> ，标题编辑器支持其它两个标准的类：<code>ALTERNATIVE</code>和<code>SELECTED_ALTERNATIVE</code>。这些类别暗示了Activity可以在一个菜单选项里显示给用户（比如：<code>LAUNCHER</code> 类别暗示了Activity需要在程序启动的时候显示给用户）。注意：过滤器也提供显示的标签（通过：<code>android:label="@string/resolve_title"</code>）来控制Activity，这个Activity用来替代显示数据的动作。（更多关于这些类别的信息、建立菜单选项，阅读 <code>PackageManager.queryIntentActivityOptions()</code>和<code>Menu.addIntentOptions()</code>函数。）</p>

<p>给定这些功能，下面的intent可以解决TitleEditor Activity：</p>

<p>动作： <code>com.android.notepad.action.EDIT_TITLE</code><br/>
数据：<code>content://com.google.provider.NotePad/notes/ID</code><br/>
调用Activity来显示和ID关联的标题，允许用户编辑标题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown: Syntax]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/05/06/markdown-syntax/"/>
    <updated>2013-05-06T16:28:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/05/06/markdown-syntax</id>
    <content type="html"><![CDATA[<p><strong>NOTE:</strong> This is Traditional Chinese Edition Document of
Markdown Syntax. If you are seeking for English Edition
Document. Please refer to <a href="http://daringfireball.net/projects/markdown/syntax">Markdown: Syntax</a>.</p>

<p><img class="center" src="http://placekitten.com/400/160"></p>

<!--more-->


<h1>Markdown: Syntax</h1>

<ul>
<li><a href="#overview">概述</a>

<ul>
<li><a href="#philosophy">哲學</a></li>
<li><a href="#html">行內 HTML</a></li>
<li><a href="#autoescape">特殊字元自動轉換</a></li>
</ul>
</li>
<li><a href="#block">區塊元素</a>

<ul>
<li><a href="#p">段落和換行</a></li>
<li><a href="#header">標題</a></li>
<li><a href="#blockquote">區塊引言</a></li>
<li><a href="#list">清單</a></li>
<li><a href="#precode">程式碼區塊</a></li>
<li><a href="#hr">分隔線</a></li>
</ul>
</li>
<li><a href="#span">區段元素</a>

<ul>
<li><a href="#link">連結</a></li>
<li><a href="#em">強調</a></li>
<li><a href="#code">程式碼</a></li>
<li><a href="#img">圖片</a></li>
</ul>
</li>
<li><a href="#misc">其它</a>

<ul>
<li><a href="#backslash">跳脫字元</a></li>
<li><a href="#autolink">自動連結</a></li>
</ul>
</li>
<li><a href="#acknowledgement">感謝</a></li>
</ul>


<p><strong>注意：</strong>這份文件是用 Markdown 寫的，你可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md">看看它的原始檔</a> 。</p>

<hr />

<h2 id="overview">概述</h2>




<h3 id="philosophy">哲學</h3>


<p>Markdown 的目標是實現「易讀易寫」。</p>

<p>不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 語法受到一些既有 text-to-HTML 格式的影響，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/">atx</a>、<a href="http://textism.com/tools/textile/">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/">EtText</a>，然而最大靈感來源其實是純文字的電子郵件格式。</p>

<p>因此 Markdown 的語法全由標點符號所組成，並經過嚴謹慎選，是為了讓它們看起來就像所要表達的意思。像是在文字兩旁加上星號，看起來就像*強調*。Markdown 的清單看起來，嗯，就是清單。假如你有使用過電子郵件，區塊引言看起來就真的像是引用一段文字。</p>

<h3 id="html">行內 HTML</h3>


<p>Markdown 的語法有個主要的目的：用來作為一種網路內容的<em>寫作</em>用語言。</p>

<p>Markdown 不是要來取代 HTML，甚至也沒有要和它相似，它的語法種類不多，只和 HTML 的一部分有關係，重點<em>不是</em>要創造一種更容易寫作 HTML 文件的語法，我認為 HTML 已經很容易寫了，Markdown 的重點在於，它能讓文件更容易閱讀、編寫。HTML 是一種<em>發佈</em>的格式，Markdown 是一種<em>編寫</em>的格式，因此，Markdown 的格式語法只涵蓋純文字可以涵蓋的範圍。</p>

<p>不在 Markdown 涵蓋範圍之外的標籤，都可以直接在文件裡面用 HTML 撰寫。不需要額外標註這是 HTML 或是 Markdown；只要直接加標籤就可以了。</p>

<p>只有區塊元素──比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等標籤，必需在前後加上空行，以利與內容區隔。而且這些（元素）的開始與結尾標籤，不可以用 tab 或是空白來縮排。Markdown 的產生器有智慧型判斷，可以避免在區塊標籤前後加上沒有必要的 <code>&lt;p&gt;</code> 標籤。</p>

<p>舉例來說，在 Markdown 文件裡加上一段 HTML 表格：</p>

<pre><code>This is a regular paragraph.

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

This is another regular paragraph.
</code></pre>

<p>請注意，Markdown 語法在 HTML 區塊標籤中將不會被進行處理。例如，你無法在 HTML 區塊內使用 Markdown 形式的<code>*強調*</code>。</p>

<p>HTML 的區段標籤如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 則不受限制，可以在 Markdown 的段落、清單或是標題裡任意使用。依照個人習慣，甚至可以不用Markdown 格式，而採用 HTML 標籤來格式化。舉例說明：如果比較喜歡 HTML 的  <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 標籤，可以直接使用這些標籤，而不用 Markdown 提供的連結或是影像標示語法。</p>

<p>HTML 區段標籤和區塊標籤不同，在區段標籤的範圍內， Markdown 的語法是有效的。</p>

<h3 id="autoescape">特殊字元自動轉換</h3>


<p>在 HTML 文件中，有兩個字元需要特殊處理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符號用於起始標籤，<code>&amp;</code> 符號則用於標記 HTML 實體，如果你只是想要使用這些符號，你必須要使用實體的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p>

<p><code>&amp;</code> 符號其實很讓寫作網路文件的人感到困擾，如果你要打「AT&amp;T」 ，你必須要寫成「<code>AT&amp;amp;T</code>」 ，還得轉換網址內的 <code>&amp;</code> 符號，如果你要連結到：</p>

<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird
</code></pre>

<p>你必須要把網址轉成：</p>

<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird
</code></pre>

<p>才能放到連結標籤的 <code>href</code> 屬性裡。不用說也知道這很容易忘記，這也可能是 HTML 標準檢查所檢查到的錯誤中，數量最多的。</p>

<p>Markdown 允許你直接使用這些符號，但是你要小心跳脫字元的使用，如果你是在HTML 實體中使用 <code>&amp;</code> 符號的話，它不會被轉換，而在其它情形下，它則會被轉換成 <code>&amp;amp;</code>。所以你如果要在文件中插入一個著作權的符號，你可以這樣寫：</p>

<pre><code>&amp;copy;
</code></pre>

<p>Markdown 將不會對這段文字做修改，但是如果你這樣寫：</p>

<pre><code>AT&amp;T
</code></pre>

<p>Markdown 就會將它轉為：</p>

<pre><code>AT&amp;amp;T
</code></pre>

<p>類似的狀況也會發生在 <code>&lt;</code> 符號上，因為 Markdown 支援 <a href="#html">行內 HTML</a> ，如果你是使用 <code>&lt;</code> 符號作為 HTML 標籤使用，那 Markdown 也不會對它做任何轉換，但是如果你是寫：</p>

<pre><code>4 &lt; 5
</code></pre>

<p>Markdown 將會把它轉換為：</p>

<pre><code>4 &amp;lt; 5
</code></pre>

<p>不過需要注意的是，code 範圍內，不論是行內還是區塊， <code>&lt;</code> 和 <code>&amp;</code> 兩個符號都<em>一定</em>會被轉換成 HTML 實體，這項特性讓你可以很容易地用 Markdown 寫 HTML code （和 HTML 相對而言， HTML 語法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都轉換為 HTML 實體，才能在 HTML 文件裡面寫出 HTML code。）</p>

<hr />

<h2 id="block">區塊元素</h2>




<h3 id="p">段落和換行</h3>


<p>一個段落是由一個以上相連接的行句組成，而一個以上的空行則會切分出不同的段落（空行的定義是顯示上看起來像是空行，便會被視為空行。比方說，若某一行只包含空白和 tab，則該行也會被視為空行），一般的段落不需要用空白或斷行縮排。</p>

<p>「一個以上相連接的行句組成」這句話其實暗示了 Markdown 允許段落內的強迫斷行，這個特性和其他大部分的 text-to-HTML 格式不一樣（包括 MovableType 的「Convert Line Breaks」選項），其它的格式會把每個斷行都轉成 <code>&lt;br /&gt;</code> 標籤。</p>

<p>如果你<em>真的</em>想要插入 <code>&lt;br /&gt;</code> 標籤的話，在行尾加上兩個以上的空白，然後按 enter。</p>

<p>是的，這確實需要花比較多功夫來插入 <code>&lt;br /&gt;</code> ，但是「每個換行都轉換為 <code>&lt;br /&gt;</code>」的方法在 Markdown 中並不適合， Markdown 中 email 式的 <a href="#blockquote">區塊引言</a> 和多段落的 <a href="#list">清單</a> 在使用換行來排版的時候，不但更好用，還更好閱讀。</p>

<h3 id="header">標題</h3>


<p>Markdown 支援兩種標題的語法，<a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a> 和 <a href="http://www.aaronsw.com/2002/atx/">atx</a> 形式。</p>

<p>Setext 形式是用底線的形式，利用 <code>=</code> （最高階標題）和 <code>-</code> （第二階標題），例如：</p>

<pre><code>This is an H1
=============

This is an H2
-------------
</code></pre>

<p>任何數量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p>

<p>Atx 形式則是在行首插入 1 到 6 個 <code>#</code> ，對應到標題 1 到 6 階，例如：</p>

<pre><code># This is an H1

## This is an H2

###### This is an H6
</code></pre>

<p>你可以選擇性地「關閉」atx 樣式的標題，這純粹只是美觀用的，若是覺得這樣看起來比較舒適，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 數量也不用和開頭一樣（行首的井字數量決定標題的階數）：</p>

<pre><code># This is an H1 #

## This is an H2 ##

### This is an H3 ######
</code></pre>

<h3 id="blockquote">Blockquotes</h3>


<p>Markdown 使用 email 形式的區塊引言，如果你很熟悉如何在 email 信件中引言，你就知道怎麼在 Markdown 文件中建立一個區塊引言，那會看起來像是你強迫斷行，然後在每行的最前面加上 <code>&gt;</code> ：</p>

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&gt; 
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>Markdown 也允許你只在整個段落的第一行最前面加上 <code>&gt;</code> ：</p>

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>區塊引言可以有階層（例如：引言內的引言），只要根據層數加上不同數量的 <code>&gt;</code> ：</p>

<pre><code>&gt; This is the first level of quoting.
&gt;
&gt; &gt; This is nested blockquote.
&gt;
&gt; Back to the first level.
</code></pre>

<p>引言的區塊內也可以使用其他的 Markdown 語法，包括標題、清單、程式碼區塊等：</p>

<pre><code>&gt; ## This is a header.
&gt; 
&gt; 1.   This is the first list item.
&gt; 2.   This is the second list item.
&gt; 
&gt; Here's some example code:
&gt; 
&gt;     return shell_exec("echo $input | $markdown_script");
</code></pre>

<p>任何標準的文字編輯器都能簡單地建立 email 樣式的引言，例如 BBEdit ，你可以選取文字後然後從選單中選擇<em>增加引言階層</em>。</p>

<h3 id="list">清單</h3>


<p>Markdown 支援有序清單和無序清單。</p>

<p>無序清單使用星號、加號或是減號作為清單標記：</p>

<pre><code>*   Red
*   Green
*   Blue
</code></pre>

<p>等同於：</p>

<pre><code>+   Red
+   Green
+   Blue
</code></pre>

<p>也等同於：</p>

<pre><code>-   Red
-   Green
-   Blue
</code></pre>

<p>有序清單則使用數字接著一個英文句點：</p>

<pre><code>1.  Bird
2.  McHale
3.  Parish
</code></pre>

<p>很重要的一點是，你在清單標記上使用的數字並不會影響輸出的 HTML 結果，上面的清單所產生的 HTML 標記為：</p>

<pre><code>&lt;ol&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;McHale&lt;/li&gt;
&lt;li&gt;Parish&lt;/li&gt;
&lt;/ol&gt;
</code></pre>

<p>如果你的清單標記寫成：</p>

<pre><code>1.  Bird
1.  McHale
1.  Parish
</code></pre>

<p>或甚至是：</p>

<pre><code>3. Bird
1. McHale
8. Parish
</code></pre>

<p>你都會得到完全相同的 HTML 輸出。重點在於，你可以讓 Markdown 文件的清單數字和輸出的結果相同，或是你懶一點，你可以完全不用在意數字的正確性。</p>

<p>如果你使用懶惰的寫法，建議第一個項目最好還是從 1. 開始，因為 Markdown 未來可能會支援有序清單的 start 屬性。</p>

<p>清單項目標記通常是放在最左邊，但是其實也可以縮排，最多三個空白，項目標記後面則一定要接著至少一個空白或 tab。</p>

<p>要讓清單看起來更漂亮，你可以把內容用固定的縮排整理好：</p>

<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>但是如果你很懶，那也不一定需要：</p>

<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>如果清單項目間用空行分開， Markdown 會把項目的內容在輸出時用 <code>&lt;p&gt;</code>
標籤包起來，舉例來說：</p>

<pre><code>*   Bird
*   Magic
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;Magic&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>但是這個：</p>

<pre><code>*   Bird

*   Magic
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>清單項目可以包含多個段落，每個項目下的段落都必須縮排 4 個空白或是一個 tab ：</p>

<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>如果你每行都有縮排，看起來會看好很多，當然，再次地，如果你很懶惰，Markdown 也允許：</p>

<pre><code>*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
</code></pre>

<p>如果要在清單項目內放進引言，那 <code>&gt;</code> 就需要縮排：</p>

<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.
</code></pre>

<p>如果要放程式碼區塊的話，該區塊就需要縮排<em>兩次</em>，也就是 8 個空白或是兩個 tab：</p>

<pre><code>*   A list item with a code block:

        &lt;code goes here&gt;
</code></pre>

<p>當然，項目清單很可能會不小心產生，像是下面這樣的寫法：</p>

<pre><code>1986. What a great season.
</code></pre>

<p>換句話說，也就是在行首出現<em>數字-句點-空白</em>，要避免這樣的狀況，你可以在句點前面加上反斜線。</p>

<pre><code>1986\. What a great season.
</code></pre>

<h3 id="precode">程式碼區塊</h3>


<p>和程式相關的寫作或是標籤語言原始碼通常會有已經排版好的程式碼區塊，通常這些區塊我們並不希望它以一般段落文件的方式去排版，而是照原來的樣子顯示，Markdown 會用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 標籤來把程式碼區塊包起來。</p>

<p>要在 Markdown 中建立程式碼區塊很簡單，只要簡單地縮排 4 個空白或是 1 個 tab 就可以，例如，下面的輸入：</p>

<pre><code>This is a normal paragraph:

    This is a code block.
</code></pre>

<p>Markdown 會轉換成：</p>

<pre><code>&lt;p&gt;This is a normal paragraph:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is a code block.
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>這個每行一階的縮排（4 個空白或是 1 個 tab），都會被移除，例如：</p>

<pre><code>Here is an example of AppleScript:

    tell application "Foo"
        beep
    end tell
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application "Foo"
    beep
end tell
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>一個程式碼區塊會一直持續到沒有縮排的那一行（或是文件結尾）。</p>

<p>在程式碼區塊裡面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 會自動轉成 HTML 實體，這樣的方式讓你非常容易使用 Markdown 插入範例用的 HTML 原始碼，只需要複製貼上，再加上縮排就可以了，剩下的 Markdown 都會幫你處理，例如：</p>

<pre><code>    &lt;div class="footer"&gt;
        &amp;copy; 2004 Foo Corporation
    &lt;/div&gt;
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class="footer"&amp;gt;
    &amp;amp;copy; 2004 Foo Corporation
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>程式碼區塊中，一般的 Markdown 語法不會被轉換，像是星號便只是星號，這表示你可以很容易地以 Markdown 語法撰寫 Markdown 語法相關的文件。</p>

<h3 id="hr">分隔線</h3>


<p>你可以在一行中用三個或以上的星號、減號、底線來建立一個分隔線，行內不能有其他東西。你也可以在星號中間插入空白。下面每種寫法都可以建立分隔線：</p>

<pre><code>* * *

***

*****

- - -

---------------------------------------
</code></pre>

<hr />

<h2 id="span">區段元素</h2>




<h3 id="link">連結</h3>


<p>Markdown 支援兩種形式的連結語法： <em>行內</em>和<em>參考</em>兩種形式。</p>

<p>不管是哪一種，連結的文字都是用 [方括號] 來標記。</p>

<p>要建立一個行內形式的連結，只要在方塊括號後面馬上接著括號並插入網址連結即可，如果你還想要加上連結的 title 文字，只要在網址後面，用雙引號把 title 文字包起來即可，例如：</p>

<pre><code>This is [an example](http://example.com/ "Title") inline link.

[This link](http://example.net/) has no title attribute.
</code></pre>

<p>會產生：</p>

<pre><code>&lt;p&gt;This is &lt;a href="http://example.com/" title="Title"&gt;
an example&lt;/a&gt; inline link.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://example.net/"&gt;This link&lt;/a&gt; has no
title attribute.&lt;/p&gt;
</code></pre>

<p>如果你是要連結到同樣主機的資源，你可以使用相對路徑：</p>

<pre><code>See my [About](/about/) page for details.   
</code></pre>

<p>參考形式的連結使用另外一個方括號接在連結文字的括號後面，而在第二個方括號裡面要填入用以辨識連結的標籤：</p>

<pre><code>This is [an example][id] reference-style link.
</code></pre>

<p>你也可以選擇性地在兩個方括號中間加上空白：</p>

<pre><code>This is [an example] [id] reference-style link.
</code></pre>

<p>接著，在文件的任意處，你可以把這個標籤的連結內容定義出來：</p>

<pre><code>[id]: http://example.com/  "Optional Title Here"
</code></pre>

<p>連結定義的形式為：</p>

<ul>
<li>方括號，裡面輸入連結的辨識用標籤</li>
<li>接著一個冒號</li>
<li>接著一個以上的空白或 tab</li>
<li>接著連結的網址</li>
<li>選擇性地接著 title 內容，可以用單引號、雙引號或是括弧包著</li>
</ul>


<p>下面這三種連結的定義都是相同：</p>

<pre><code>[foo]: http://example.com/  "Optional Title Here"
[foo]: http://example.com/  'Optional Title Here'
[foo]: http://example.com/  (Optional Title Here)
</code></pre>

<p><strong>請注意：</strong>有一個已知的問題是 Markdown.pl 1.0.1 會忽略單引號包起來的連結 title。</p>

<p>連結網址也可以用方括號包起來：</p>

<pre><code>[id]: &lt;http://example.com/&gt;  "Optional Title Here"
</code></pre>

<p>你也可以把 title 屬性放到下一行，也可以加一些縮排，網址太長的話，這樣會比較好看：</p>

<pre><code>[id]: http://example.com/longish/path/to/resource/here
    "Optional Title Here"
</code></pre>

<p>網址定義只有在產生連結的時候用到，並不會直接出現在文件之中。</p>

<p>連結辨識標籤可以有字母、數字、空白和標點符號，但是並<em>不</em>區分大小寫，因此下面兩個連結是一樣的：</p>

<pre><code>[link text][a]
[link text][A]
</code></pre>

<p><em>預設的連結標籤</em>功能讓你可以省略指定連結標籤，這種情形下，連結標籤和連結文字會視為相同，要用預設連結標籤只要在連結文字後面加上一個空的方括號，如果你要讓 &#8220;Google&#8221; 連結到 google.com，你可以簡化成：</p>

<pre><code>[Google][]
</code></pre>

<p>然後定義連結內容：</p>

<pre><code>[Google]: http://google.com/
</code></pre>

<p>由於連結文字可能包含空白，所以這種簡化的標籤內也可以包含多個文字：</p>

<pre><code>Visit [Daring Fireball][] for more information.
</code></pre>

<p>然後接著定義連結：</p>

<pre><code>[Daring Fireball]: http://daringfireball.net/
</code></pre>

<p>連結的定義可以放在文件中的任何一個地方，我比較偏好直接放在連結出現段落的後面，你也可以把它放在文件最後面，就像是註解一樣。</p>

<p>下面是一個參考式連結的範例：</p>

<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        "Google"
  [2]: http://search.yahoo.com/  "Yahoo Search"
  [3]: http://search.msn.com/    "MSN Search"
</code></pre>

<p>如果改成用連結名稱的方式寫：</p>

<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        "Google"
  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"
  [msn]:    http://search.msn.com/    "MSN Search"
</code></pre>

<p>上面兩種寫法都會產生下面的 HTML。</p>

<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href="http://google.com/"
title="Google"&gt;Google&lt;/a&gt; than from
&lt;a href="http://search.yahoo.com/" title="Yahoo Search"&gt;Yahoo&lt;/a&gt;
or &lt;a href="http://search.msn.com/" title="MSN Search"&gt;MSN&lt;/a&gt;.&lt;/p&gt;
</code></pre>

<p>下面是用行內形式寫的同樣一段內容的 Markdown 文件，提供作為比較之用：</p>

<pre><code>I get 10 times more traffic from [Google](http://google.com/ "Google")
than from [Yahoo](http://search.yahoo.com/ "Yahoo Search") or
[MSN](http://search.msn.com/ "MSN Search").
</code></pre>

<p>參考式的連結其實重點不在於它比較好寫，而是它比較好讀，比較一下上面的範例，使用參考式的文章本身只有 81 個字元，但是用行內形式的連結卻會增加到 176 個字元，如果是用純 HTML 格式來寫，會有 234 個字元，在 HTML 格式中，標籤比文字還要多。</p>

<p>使用 Markdown 的參考式連結，可以讓文件更像是瀏覽器最後產生的結果，讓你可以把一些標記相關的資訊移到段落文字之外，你就可以增加連結而不讓文章的閱讀感覺被打斷。</p>

<h3 id="em">強調</h3>


<p>Markdown 使用星號（<code>*</code>）和底線（<code>_</code>）作為標記強調字詞的符號，被 <code>*</code> 或 <code>_</code> 包圍的字詞會被轉成用 <code>&lt;em&gt;</code> 標籤包圍，用兩個 <code>*</code> 或 <code>_</code> 包起來的話，則會被轉成 <code>&lt;strong&gt;</code>，例如：</p>

<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre>

<p>會轉成：</p>

<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre>

<p>你可以隨便用你喜歡的樣式，唯一的限制是，你用什麼符號開啟標籤，就要用什麼符號結束。</p>

<p>強調也可以直接插在文字中間：</p>

<pre><code>un*frigging*believable
</code></pre>

<p>但是如果你的 <code>*</code> 和 <code>_</code> 兩邊都有空白的話，它們就只會被當成普通的符號。</p>

<p>如果要在文字前後直接插入普通的星號或底線，你可以用反斜線：</p>

<pre><code>\*this text is surrounded by literal asterisks\*
</code></pre>

<h3 id="code">程式碼</h3>


<p>如果要標記一小段行內程式碼，你可以用反引號把它包起來（<code>`</code>），例如：</p>

<pre><code>Use the `printf()` function.
</code></pre>

<p>會產生：</p>

<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
</code></pre>

<p>如果要在程式碼區段內插入反引號，你可以用多個反引號來開啟和結束程式碼區段：</p>

<pre><code>``There is a literal backtick (`) here.``
</code></pre>

<p>這段語法會產生：</p>

<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;
</code></pre>

<p>程式碼區段的起始和結束端都可以放入一個空白，起始端後面一個，結束端前面一個，這樣你就可以在區段的一開始就插入反引號：</p>

<pre><code>A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
</code></pre>

<p>會產生：</p>

<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre>

<p>在程式碼區段內，<code>&amp;</code> 和方括號都會被轉成 HTML 實體，這樣會比較容易插入 HTML 原始碼，Markdown 會把下面這段：</p>

<pre><code>Please don't use any `&lt;blink&gt;` tags.
</code></pre>

<p>轉為：</p>

<pre><code>&lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre>

<p>你也可以這樣寫：</p>

<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.
</code></pre>

<p>以產生：</p>

<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;
</code></pre>

<h3 id="img">圖片</h3>


<p>很明顯地，要在純文字應用中設計一個 「自然」的語法來插入圖片是有一定難度的。</p>

<p>Markdown 使用一種和連結很相似的語法來標記圖片，同樣也允許兩種樣式： <em>行內</em>和<em>參考</em>。</p>

<p>行內圖片的語法看起來像是：</p>

<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg "Optional title")
</code></pre>

<p>詳細敘述如下：</p>

<ul>
<li>一個驚嘆號 <code>!</code></li>
<li>接著一個方括號，裡面放上圖片的替代文字</li>
<li>接著一個普通括號，裡面放上圖片的網址，最後還可以用引號包住並加上
選擇性的 &#8216;title&#8217; 文字。</li>
</ul>


<p>參考式的圖片語法則長得像這樣：</p>

<pre><code>![Alt text][id]
</code></pre>

<p>「id」是圖片參考的名稱，圖片參考的定義方式則和連結參考一樣：</p>

<pre><code>[id]: url/to/image  "Optional title attribute"
</code></pre>

<p>到目前為止， Markdown 還沒有辦法指定圖片的寬高，如果你需要的話，你可以使用普通的 <code>&lt;img&gt;</code> 標籤。</p>

<hr />

<h2 id="misc">其它</h2>




<h3 id="autolink">自動連結</h3>


<p>Markdown 支援比較簡短的自動連結形式來處理網址和電子郵件信箱，只要是用方括號包起來， Markdown 就會自動把它轉成連結，連結的文字就和連結位置一樣，例如：</p>

<pre><code>&lt;http://example.com/&gt;
</code></pre>

<p>Markdown 會轉為：</p>

<pre><code>&lt;a href="http://example.com/"&gt;http://example.com/&lt;/a&gt;
</code></pre>

<p>自動的郵件連結也很類似，只是 Markdown 會先做一個編碼轉換的過程，把文字字元轉成 16 進位碼的 HTML 實體，這樣的格式可以混淆一些不好的信箱地址收集機器人，例如：</p>

<pre><code>&lt;address@example.com&gt;
</code></pre>

<p>Markdown 會轉成：</p>

<pre><code>&lt;a href="&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;"&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre>

<p>在瀏覽器裡面，這段字串會變成一個可以點擊的「address@example.com」連結。</p>

<p>（這種作法雖然可以混淆不少的機器人，但並無法全部擋下來，不過這樣也比什麼都不做好些。無論如何，公開你的信箱終究會引來廣告信件的。）</p>

<h3 id="backslash">跳脫字元</h3>


<p>Markdown 可以利用反斜線來插入一些在語法中有其它意義的符號，例如：如果你想要用星號加在文字旁邊的方式來做出強調效果（但不用 <code>&lt;em&gt;</code> 標籤），你可以在星號的前面加上反斜線：</p>

<pre><code>\*literal asterisks\*
</code></pre>

<p>Markdown 支援在下面這些符號前面加上反斜線來幫助插入普通的符號：</p>

<pre><code>\   反斜線
`   反引號
*   星號
_   底線
{}  大括號
[]  方括號
()  括號
#   井字號
+   加號
-   減號
.   英文句點
!   驚嘆號
</code></pre>

<h2 id="acknowledgement">感謝</h2>


<p>感謝 <a href="https://twitter.com/#!/leafy7382">leafy7382</a> 協助翻譯，<a href="http://iamhlb.com/">hlb</a>、<a href="http://twitter.com/randylien">Randylien</a> 幫忙潤稿，<a href="https://twitter.com/#!/ethantw">ethantw</a> 的<a href="http://ethantw.net/projects/han/">漢字標準格式・CSS Reset</a>， <a href="http://kidwm.net/">WM</a> 回報文字錯誤。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android training lesson 1 - Designing for Multiple Screens]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/05/03/android-training-design-mutil-screen/"/>
    <updated>2013-05-03T19:59:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/05/03/android-training-design-mutil-screen</id>
    <content type="html"><![CDATA[<p>Supporting Different Screen Sizes</p>

<h2><img class="center" src="http://placekitten.com/320/360"> </h2>

<!--more-->


<p>This lesson shows you how to support different screen sizes by:</p>

<ul>
<li>Ensuring your layout can be adequately resized to fit the screen</li>
<li>Providing appropriate UI layout according to screen configuration</li>
<li>Ensuring the correct layout is applied to the correct screen</li>
<li>Providing bitmaps that scale correctly</li>
</ul>


<h2>Use &#8220;wrap_content&#8221; and &#8220;match_parent&#8221;</h2>

<p>To ensure that your layout is flexible and adapts to different screen sizes, you should use <code>"wrap_content"</code> and <code>"match_parent"</code> for the width and height of some view components. If you use <code>"wrap_content"</code>, the width or height of the view is set to the minimum size necessary to fit the content within that view, while <code>"match_parent"</code> (also known as <code>"fill_parent"</code> before API level 8) makes the component expand to match the size of its parent view.</p>

<p>By using the <code>"wrap_content"</code> and <code>"match_parent"</code> size values instead of hard-coded sizes, your views either use only the space required for that view or expand to fill the available space, respectively. For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:orientation="vertical"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>    &lt;LinearLayout android:layout_width="match_parent" 
</span><span class='line'>                  android:id="@+id/linearLayout1"  
</span><span class='line'>                  android:gravity="center"
</span><span class='line'>                  android:layout_height="50dp"&gt;
</span><span class='line'>        &lt;ImageView android:id="@+id/imageView1" 
</span><span class='line'>                   android:layout_height="wrap_content"
</span><span class='line'>                   android:layout_width="wrap_content"
</span><span class='line'>                   android:src="@drawable/logo"
</span><span class='line'>                   android:paddingRight="30dp"
</span><span class='line'>                   android:layout_gravity="left"
</span><span class='line'>                   android:layout_weight="0" /&gt;
</span><span class='line'>        &lt;View android:layout_height="wrap_content" 
</span><span class='line'>              android:id="@+id/view1"
</span><span class='line'>              android:layout_width="wrap_content"
</span><span class='line'>              android:layout_weight="1" /&gt;
</span><span class='line'>        &lt;Button android:id="@+id/categorybutton"
</span><span class='line'>                android:background="@drawable/button_bg"
</span><span class='line'>                android:layout_height="match_parent"
</span><span class='line'>                android:layout_weight="0"
</span><span class='line'>                android:layout_width="120dp"
</span><span class='line'>                style="@style/CategoryButtonStyle"/&gt;
</span><span class='line'>    &lt;/LinearLayout&gt;
</span><span class='line'>
</span><span class='line'>    &lt;fragment android:id="@+id/headlines" 
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="match_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>Notice how the sample uses <code>"wrap_content"</code> and <code>"match_parent"</code> for component sizes rather than specific dimensions. This allows the layout to adapt correctly to different screen sizes and orientations.</p>

<p>For example, this is what this layout looks like in portrait and landscape mode. Notice that the sizes of the components adapt automatically to the width and height:</p>

<p><img src="http://lxmxhh.github.io/images/blogs/130503/layout-hvga.png"><br/>
Figure 1. The News Reader sample app in portrait (left) and landscape (right).</p>

<h2>Use RelativeLayout</h2>

<p>You can construct fairly complex layouts using nested instances of <code>LinearLayout</code> and combinations of <code>"wrap_content"</code> and <code>"match_parent"</code> sizes. However, <code>LinearLayout</code> does not allow you to precisely control the spacial relationships of child views; views in a <code>LinearLayout</code> simply line up side-by-side. If you need child views to be oriented in variations other than a straight line, a better solution is often to use a <code>RelativeLayout</code>, which allows you to specify your layout in terms of the spacial relationships between components. For instance, you can align one child view on the left side and another view on the right side of the screen.</p>

<p>For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>    &lt;TextView
</span><span class='line'>        android:id="@+id/label"
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:text="Type here:"/&gt;
</span><span class='line'>    &lt;EditText
</span><span class='line'>        android:id="@+id/entry"
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:layout_below="@id/label"/&gt;
</span><span class='line'>    &lt;Button
</span><span class='line'>        android:id="@+id/ok"
</span><span class='line'>        android:layout_width="wrap_content"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:layout_below="@id/entry"
</span><span class='line'>        android:layout_alignParentRight="true"
</span><span class='line'>        android:layout_marginLeft="10dp"
</span><span class='line'>        android:text="OK" /&gt;
</span><span class='line'>    &lt;Button
</span><span class='line'>        android:layout_width="wrap_content"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:layout_toLeftOf="@id/ok"
</span><span class='line'>        android:layout_alignTop="@id/ok"
</span><span class='line'>        android:text="Cancel" /&gt;
</span><span class='line'>&lt;/RelativeLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>Figure 2 shows how this layout appears on a QVGA screen.</p>

<p><img src="http://lxmxhh.github.io/images/blogs/130503/relativelayout1.png"><br/>
Figure 2. Screenshot on a QVGA screen (small screen).</p>

<p>Figure 3 shows how it appears on a larger screen.</p>

<p><img src="http://lxmxhh.github.io/images/blogs/130503/relativelayout2.png"><br/>
Figure 3. Screenshot on a WSVGA screen (large screen).</p>

<p>Notice that although the size of the components changed, their spatial relationships are preserved as specified by the <code>RelativeLayout.LayoutParams</code>.</p>

<h2>Use Size Qualifiers</h2>

<p>There&#8217;s only so much mileage you can get from a flexible layout or relative layout like the one in the previous sections. While those layouts adapt to different screens by stretching the space within and around components, they may not provide the best user experience for each screen size. Therefore, your application should not only implement flexible layouts, but should also provide several alternative layouts to target different screen configurations. You do so by using <code>configuration qualifiers</code>, which allows the runtime to automatically select the appropriate resource based on the current device’s configuration (such as a different layout design for different screen sizes).</p>

<p>For example, many applications implement the &#8220;two pane&#8221; pattern for large screens (the app might show a list of items on one pane and the content on another pane). Tablets and TVs are large enough for both panes to fit simultaneously on screen, but phone screens have to show them separately. So, to implement these layouts, you could have the following files:</p>

<p><code>res/layout/main.xml</code>, single-pane (default) layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:orientation="vertical"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="match_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/layout-large/main.xml</code>, two-pane layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="fill_parent"
</span><span class='line'>    android:layout_height="fill_parent"
</span><span class='line'>    android:orientation="horizontal"&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="400dp"
</span><span class='line'>              android:layout_marginRight="10dp"/&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/article"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.ArticleFragment"
</span><span class='line'>              android:layout_width="fill_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>Notice the <code>large</code> qualifier in the directory name of the second layout. This layout will be selected on devices with screens classified as large (for example, 7&#8221; tablets and above). The other layout (without qualifiers) will be selected for smaller devices.</p>

<p>Use the Smallest-width Qualifier
One of the difficulties developers had in pre-3.2 Android devices was the &#8220;large&#8221; screen size bin, which encompasses the Dell Streak, the original Galaxy Tab, and 7&#8221; tablets in general. However, many applications may want to show different layouts for different devices in this category (such as for 5&#8221; and 7&#8221; devices), even though they are all considered to be &#8220;large&#8221; screens. That&#8217;s why Android introduced the &#8220;Smallest-width&#8221; qualifier (amongst others) in Android 3.2.</p>

<p>The Smallest-width qualifier allows you to target screens that have a certain minimum width given in dp. For example, the typical 7&#8221; tablet has a minimum width of 600 dp, so if you want your UI to have two panes on those screens (but a single list on smaller screens), you can use the same two layouts from the previous section for single and two-pane layouts, but instead of the <code>large</code> size qualifier, use <code>sw600dp</code> to indicate the two-pane layout is for screens on which the smallest-width is 600 dp:</p>

<p><code>res/layout/main.xml</code>, single-pane (default) layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:orientation="vertical"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="match_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/layout-sw600dp/main.xml</code>, two-pane layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="fill_parent"
</span><span class='line'>    android:layout_height="fill_parent"
</span><span class='line'>    android:orientation="horizontal"&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="400dp"
</span><span class='line'>              android:layout_marginRight="10dp"/&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/article"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.ArticleFragment"
</span><span class='line'>              android:layout_width="fill_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>This means that devices whose smallest width is greater than or equal to 600dp will select the <code>layout-sw600dp/main.xml</code> (two-pane) layout, while smaller screens will select the <code>layout/main.xml</code> (single-pane) layout.</p>

<p>However, this won&#8217;t work well on pre-3.2 devices, because they don&#8217;t recognize <code>sw600dp</code> as a size qualifier, so you still have to use the <code>large</code> qualifier as well. So, you should have a file named <code>res/layout-large/main.xml</code> which is identical to <code>res/layout-sw600dp/main.xml</code>. In the next section you&#8217;ll see a technique that allows you to avoid duplicating the layout files this way.</p>

<h2>Use Layout Aliases</h2>

<p>The smallest-width qualifier is available only on Android 3.2 and above. Therefore, you should also still use the abstract size bins (small, normal, large and xlarge) to be compatible with earlier versions. For example, if you want to design your UI so that it shows a single-pane UI on phones but a multi-pane UI on 7&#8221; tablets, TVs and other large devices, you&#8217;d have to supply these files:</p>

<ul>
<li><code>res/layout/main.xml</code>: single-pane layout</li>
<li><code>res/layout-large</code>: multi-pane layout</li>
<li><code>res/layout-sw600dp</code>: multi-pane layout
The last two files are identical, because one of them will be matched by Android 3.2 devices, and the other one is for the benefit of tablets and TVs with earlier versions of Android.</li>
</ul>


<p>To avoid this duplication of the same file for tablets and TVs (and the maintenance headache resulting from it), you can use alias files. For example, you can define the following layouts:</p>

<ul>
<li><code>res/layout/main.xml</code>, single-pane layout</li>
<li><code>res/layout/main_twopanes.xml</code>, two-pane layout
And add these two files:</li>
</ul>


<p><code>res/values-large/layout.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main" type="layout"&gt;@layout/main_twopanes&lt;/item&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/values-sw600dp/layout.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main" type="layout"&gt;@layout/main_twopanes&lt;/item&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<p>These latter two files have identical content, but they don’t actually define the layout. They merely set up <code>main</code> to be an alias to <code>main_twopanes</code>. Since these files have <code>large</code> and <code>sw600dp</code> selectors, they are applied to tablets and TVs regardless of Android version (pre-3.2 tablets and TVs match <code>large</code>, and post-3.2 will match <code>sw600dp</code>).</p>

<h2>Use Orientation Qualifiers</h2>

<p>Some layouts work well in both landscape and portrait orientations, but most of them can benefit from adjustments. In the News Reader sample app, here is how the layout behaves in each screen size and orientation:</p>

<ul>
<li>small screen, portrait: single pane, with logo</li>
<li>small screen, landscape: single pane, with logo</li>
<li>7&#8221; tablet, portrait: single pane, with action bar</li>
<li>7&#8221; tablet, landscape: dual pane, wide, with action bar</li>
<li>10&#8221; tablet, portrait: dual pane, narrow, with action bar</li>
<li>10&#8221; tablet, landscape: dual pane, wide, with action bar</li>
<li>TV, landscape: dual pane, wide, with action bar
So each of these layouts is defined in an XML file in the <code>res/layout/ directory</code>. To then assign each layout to the various screen configurations, the app uses layout aliases to match them to each configuration:</li>
</ul>


<p><code>res/layout/onepane.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:orientation="vertical"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="match_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/layout/onepane_with_bar.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:orientation="vertical"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>    &lt;LinearLayout android:layout_width="match_parent" 
</span><span class='line'>                  android:id="@+id/linearLayout1"  
</span><span class='line'>                  android:gravity="center"
</span><span class='line'>                  android:layout_height="50dp"&gt;
</span><span class='line'>        &lt;ImageView android:id="@+id/imageView1" 
</span><span class='line'>                   android:layout_height="wrap_content"
</span><span class='line'>                   android:layout_width="wrap_content"
</span><span class='line'>                   android:src="@drawable/logo"
</span><span class='line'>                   android:paddingRight="30dp"
</span><span class='line'>                   android:layout_gravity="left"
</span><span class='line'>                   android:layout_weight="0" /&gt;
</span><span class='line'>        &lt;View android:layout_height="wrap_content" 
</span><span class='line'>              android:id="@+id/view1"
</span><span class='line'>              android:layout_width="wrap_content"
</span><span class='line'>              android:layout_weight="1" /&gt;
</span><span class='line'>        &lt;Button android:id="@+id/categorybutton"
</span><span class='line'>                android:background="@drawable/button_bg"
</span><span class='line'>                android:layout_height="match_parent"
</span><span class='line'>                android:layout_weight="0"
</span><span class='line'>                android:layout_width="120dp"
</span><span class='line'>                style="@style/CategoryButtonStyle"/&gt;
</span><span class='line'>    &lt;/LinearLayout&gt;
</span><span class='line'>
</span><span class='line'>    &lt;fragment android:id="@+id/headlines" 
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="match_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/layout/twopanes.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="fill_parent"
</span><span class='line'>    android:layout_height="fill_parent"
</span><span class='line'>    android:orientation="horizontal"&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="400dp"
</span><span class='line'>              android:layout_marginRight="10dp"/&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/article"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.ArticleFragment"
</span><span class='line'>              android:layout_width="fill_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/layout/twopanes_narrow.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="fill_parent"
</span><span class='line'>    android:layout_height="fill_parent"
</span><span class='line'>    android:orientation="horizontal"&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="200dp"
</span><span class='line'>              android:layout_marginRight="10dp"/&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/article"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.ArticleFragment"
</span><span class='line'>              android:layout_width="fill_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now that all possible layouts are defined, it&#8217;s just a matter of mapping the correct layout to each configuration using the configuration qualifiers. You can now do it using the layout alias technique:</p>

<p><code>res/values/layouts.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main_layout" type="layout"&gt;@layout/onepane_with_bar&lt;/item&gt;
</span><span class='line'>    &lt;bool name="has_two_panes"&gt;false&lt;/bool&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/values-sw600dp-land/layouts.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main_layout" type="layout"&gt;@layout/twopanes&lt;/item&gt;
</span><span class='line'>    &lt;bool name="has_two_panes"&gt;true&lt;/bool&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/values-sw600dp-port/layouts.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main_layout" type="layout"&gt;@layout/onepane&lt;/item&gt;
</span><span class='line'>    &lt;bool name="has_two_panes"&gt;false&lt;/bool&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/values-large-land/layouts.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main_layout" type="layout"&gt;@layout/twopanes&lt;/item&gt;
</span><span class='line'>    &lt;bool name="has_two_panes"&gt;true&lt;/bool&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/values-large-port/layouts.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main_layout" type="layout"&gt;@layout/twopanes_narrow&lt;/item&gt;
</span><span class='line'>    &lt;bool name="has_two_panes"&gt;true&lt;/bool&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Use Nine-patch Bitmaps</h2>

<p>Supporting different screen sizes usually means that your image resources must also be capable of adapting to different sizes. For example, a button background must fit whichever button shape it is applied to.</p>

<p>If you use simple images on components that can change size, you will quickly notice that the results are somewhat less than impressive, since the runtime will stretch or shrink your images uniformly. The solution is using nine-patch bitmaps, which are specially formatted PNG files that indicate which areas can and cannot be stretched.</p>

<p>Therefore, when designing bitmaps that will be used on components with variable size, always use nine-patches. To convert a bitmap into a nine-patch, you can start with a regular image (figure 4, shown with in 4x zoom for clarity).</p>

<p><img src="http://lxmxhh.github.io/images/blogs/130503/button.png"><br/>
Figure 4. button.png</p>

<p>And then run it through the <code>draw9patch</code> utility of the SDK (which is located in the <code>tools/</code> directory), in which you can mark the areas that should be stretched by drawing pixels along the left and top borders. You can also mark the area that should hold the content by drawing pixels along the right and bottom borders, resulting in figure 5.</p>

<p><img src="http://lxmxhh.github.io/images/blogs/130503/button_with_marks.png"><br/>
Figure 5. button.9.png</p>

<p>Notice the black pixels along the borders. The ones on the top and left borders indicate the places where the image can be stretched, and the ones on the right and bottom borders indicate where the content should be placed.</p>

<p>Also, notice the <code>.9.png</code> extension. You must use this extension, since this is how the framework detects that this is a nine-patch image, as opposed to a regular PNG image.</p>

<p>When you apply this background to a component (by setting <code>android:background="@drawable/button"</code>), the framework stretches the image correctly to accommodate the size of the button, as shown in various sizes in figure 6.</p>

<p><img src="http://lxmxhh.github.io/images/blogs/130503/buttons_stretched.png"><br/>
Figure 6. A button using the button.9.png nine-patch in various sizes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GL从头学（一）]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/04/30/learning-opengl/"/>
    <updated>2013-04-30T22:42:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/04/30/learning-opengl</id>
    <content type="html"><![CDATA[<p>进入游戏行业已经8年了，虽然一直从事的图形图像相关的开发，接触的一直都是微软的DX，从未有闲暇去了解一下鼻祖OpenGL。之前的红宝书也不知道哪里去了，最近发现再版，立马入手了。
亚马逊链接： <a href="http://www.amazon.cn/gp/aw/d/B003D7LWI6/ref=mp_s_a_1?qid=1367829548&amp;sr=8-1&amp;pi=SL75">OpenGL编程指南</a><br/>
<img class="center" src="http://placekitten.com/400/300"></p>

<!--more-->


<h2>OpenGL 数据类型</h2>

<p>首先我们要讨论的是OpenGL的数据类型。因为OpenGL是一个跨平台的API，数据类型的大小会随使用的编程语言以及处理器（64位，32位，16位）等的不同而不同，所以OpenGL定义了自己的数据类型。当传递数据到OpenGL时，你应该坚持使用这些OpenGL的数据类型，从而保证传递数据的尺寸和精度正确。不这样做的后果是可能会导致无法预料的结果或由于运行时的数据转换造成效率低下。不论平台或语言实现的OpenGL都采用这种方式定义数据类型以保证在各平台上数据的尺寸一致，并使平台间OpenGL代码移植更为容易。
下面是OpenGL的各种数据类型:</p>

<ul>
<li> GLenum: 用于GL枚举的无符号整型。通常用于通知OpenGL由指针传递的存储于数组中数据的类型（例如，GL_FLOAT用于指示数组由GLfloat组成）。</li>
<li> GLboolean: 用于单布尔值。OpenGL ES还定义了其自己的“真”和“假”值（GL_TRUE和GL_FALSE）以避免平台和语言的差别。当向OpenGL传递布尔值时，请使用这些值而不是使用YES或NO（尽管由于它们的定义实际没有区别，即使你不小心使用了YES或NO。但是，使用GL-定义值是一个好的习惯。）</li>
<li> GLbitfield: 用于将多个布尔值（最多32个）打包到单个使用位操作变量的四字节整型。我们将在第一次使用位域变量时详细介绍，请参阅 wikipedia</li>
<li> GLbyte: 有符号单字节整型，包含数值从-128 到 127</li>
<li> GLshort: 有符号双字节整型，包含数值从−32,768 到 32,767</li>
<li> GLint: 有符号四字节整型，包含数值从−2,147,483,648 到 2,147,483,647</li>
<li> GLsizei: 有符号四字节整型，用于代表数据的尺寸（字节），类似于C中的size_t</li>
<li> GLubyte: 无符号单字节整型，包含数值从0 到 255。</li>
<li> GLushort: 无符号双字节整型，包含数值从0 到 65,535</li>
<li> GLuint: 无符号四字节整型，包含数值从0 到 4,294,967,295</li>
<li> GLfloat: 四字节精度IEEE 754-1985 浮点数</li>
<li> GLclampf: 这也是四字节精度浮点数，但OpenGL使用GLclampf特别表示数值为0.0 到 1.0</li>
<li> GLvoid:void值用于指示一个函数没有返回值，或没有参数</li>
<li> GLfixed: 定点数 使用整型数存储实数。由于大部分计算机处理器在处理整型数比处理浮点数快很多，这通常是对3D系统的优化方式。但因为iPhone具有用于浮点运算的矢量处理器，我们将不讨论定点运算或GLfixed数据类型。</li>
<li> GLclampx: 另一种定点型，用于使用定点运算来表示0.0 到 1.0之间的实数。正如GLfixed，我们不会讨论或使用它。</li>
</ul>


<p>OpenGL ES （至少iPhone目前所使用的版本）不支持8字节（64位）数据类型，如long或double。OpenGL 其实具有这些大型数据类型，但考虑到大部分嵌入式设备屏幕尺寸以及可能为它们所写的程序类型而且使用它们有可能对性能造成不利的影响，最后的决定是在OpenGL ES中排除这些数据类型。</p>

<h2>点或顶点</h2>

<p>3D图像的最小单位称为 点（point）或者顶点vertex。它们代表三维空间中的一个点并用来建造更复杂的物体。多边形就是由点构成，而物体是由多个多边形组成。尽管通常OpenGL支持多种多边形，但OpenGL ES只支持三边形（即三角形）。
如果你回忆高中学过的几何学，你可能会记得所谓笛卡尔坐标。 基本概念是在空间中任选一点，称作原点。 然后你可以通过参照原点并使用三个代表三维的数值指定空间中的任意一点，坐标是由三个想象的通过原点线表示的。从左至右的想象直线叫x-轴。沿着x-轴从左至右数值变大，向左移动数值变小。原点左方x为负值，右边为正值。另外两轴同理。沿y轴向上，y值增加，向下y值减小。原点上方y为正，原点下方为负。对于z轴，当物体离开观察者，数值变小，向观察者移动（或超出观察者），数值变大。原点前方z值为正，原点之后为负。下图帮助说明了这一点：</p>

<p><img src="http://lxmxhh.github.io/images/blogs/130430/gl1.png"><br/>
Note: iPhone上另一种绘图框架Core Graphics使用了稍微不同的坐标系统，当向屏幕上方移动时y值减小，而向下移动y值增加。</p>

<p>沿各轴增加或减小的数值是以任意刻度进行的 – 它们不代表任何真实单位，如英尺，英寸或米等。你可以选择任何对你的程序有意义的刻度。如果你想设计的游戏以英尺为单位，你可以那样做。如果你希望单位为毫米，同样可行。OpenGL不管它对最终用户代表什么，只是将它作为单位处理，保证它们具有相同的距离。
由于任何物体在三维空间中的方位可以由三个数值表示，物体的位置通常在OpenGL中由使用一个三维数组的三个GLfloat变量表示，数组中的第一项（索引0）为x位置，第二项（索引1）为y位置，第三项（索引2）为z位置。下面是一个创建OpenGL ES顶点的简单例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GLfloat vertex[3];
</span><span class='line'>vertex[0] = 10.0;       // x
</span><span class='line'>vertex[1] = 23.75;      // y    
</span><span class='line'>vertex[2] = -12.532;    // z</span></code></pre></td></tr></table></div></figure>


<p>在OpenGL ES中，通常将场景中所有构成所有或部分物体的提交为顶点数组。一个顶点数组是包括场景中部分或所有顶点数据的简单数组。我将在系列的下一篇教程中讨论，有关顶点数组要记住的是它们的大小是基于呈现的顶点数乘以三（三维空间绘图）或二（二维空间绘图）。所以一个包含六个三维空间中的三角形的顶点数组由54个GLfloat组成，因为每个三角形有三个顶点，而每个顶点有三个坐标，即6 x 3 x 3 = 54。
处理所有这些GLfloat是很痛苦的事情。幸运的是，有一个容易的方法。我们可以定义一个数据结构了保存多个顶点，像这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef struct { 
</span><span class='line'>    GLfloat x;
</span><span class='line'>    GLfloat y;
</span><span class='line'>    GLfloat z;
</span><span class='line'>} Vertex3D;</span></code></pre></td></tr></table></div></figure>


<p>通过这样做，我们的代码可读性更强：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vertex3D vertex;
</span><span class='line'>vertex.x = 10.0;
</span><span class='line'>vertex.y = 23.75;
</span><span class='line'>vertex.z = -12.532;</span></code></pre></td></tr></table></div></figure>


<p>现在由于Vertex3D由三个GLfloat组成，向Vertex3D传递指针与向数组传递一个包含三个GLfloat的数组的指针完全一样。对于电脑而言毫无分别；两者具有同样的尺寸和同样的字节数以及OpenGL需要的同样的顺序。将数据分组到数据结构只是让程序员感到更容易，处理起来更方便。如果你下载了文章开头处的Xcode模板，你会发现此数据结构以及我后面将讨论的各种函数都定义在文件OpenGLCommon.h中。还有一个内联函数用于创建单个顶点：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static inline Vertex3D Vertex3DMake(CGFloat inX, CGFloat inY, CGFloat inZ)
</span><span class='line'>{
</span><span class='line'>    Vertex3D ret;
</span><span class='line'>    ret.x = inX;
</span><span class='line'>    ret.y = inY;
</span><span class='line'>    ret.z = inZ;
</span><span class='line'>    return ret;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如果你回忆起几何学（如果不记得也不要紧）的内容，你会知道空间中两点间的距离是使用下面公式计算的：<br/>
<img class="center" src="http://lxmxhh.github.io/images/blogs/130430/gl2.png">
我们可以在一个简单的内联函数中实现这个公式来计算三维空间中任何两点间的直线距离：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static inline GLfloat Vertex3DCalculateDistanceBetweenVertices (Vertex3D first, Vertex3D second)
</span><span class='line'>{
</span><span class='line'>    GLfloat deltaX = second.x - first.x;
</span><span class='line'>    GLfloat deltaY = second.y - first.y;
</span><span class='line'>    GLfloat deltaZ = second.z - first.z;
</span><span class='line'>    return sqrtf(deltaX*deltaX + deltaY*deltaY + deltaZ*deltaZ );
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<h2>三角形</h2>

<p>由于OpenGL ES仅支持三角形，因此我们可以通过创建一个数据结构将三个顶点组合成一个三角形物体。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef struct {
</span><span class='line'>    Vertex3D v1;
</span><span class='line'>    Vertex3D v2;
</span><span class='line'>    Vertex3D v3;
</span><span class='line'>} Triangle3D;</span></code></pre></td></tr></table></div></figure>


<p>一个Triangle3D实际上与一个九个GLfloat构成的数组是完全一样的，因为我们通过顶点和三角形而不是GLfloat数组来构建物体，所以它能帮助我们更容易地处理我们的代码。
然而关于三角形你需要知道更多的事情。在OpenGL中有一个概念叫卷绕(winding)， 它表示顶点绘制的次序是重要的。不像真实世界中的物体，OpenGL中的多边形通常都不会有两面。它们只有一面，被当做front face（前面）， 三角形只有其front face面对观察者时才可见。可以设置OpenGL将多边形作为两面处理，但默认状态下，三角形只有一个可见面。通过知道哪一个面是多边形的前面或可见面，才能使OpenGL只做一半的计算。
尽管有时多边形也可以独立存在，需要绘制其背面，但通常三角形是一个大物体的一部分，其面对物体内部的一面永远也不可见。不被绘制的一面称为backface（背面），OpenGL是通过观察顶点的绘制次序来确定front face和backface的。以反时针次序绘制顶点的构成的面是frontface（默认，可以改变）。由于OpenGL可以很容易确定哪个三角形对用户可见，所以它使用了一种称为Backface Culling（隐面消除） 的技术来避免绘制视窗中多边形的不可见面。下一篇文章将讨论视窗，现在你可将其想象成一个虚拟摄像或观察OpenGL世界的虚拟窗口。<br/>
<img src="http://lxmxhh.github.io/images/blogs/130430/gl3.png"><br/>
上图中，左边青色的三角形是backface，因此将不可见。而右方的三角形是frontface，所以将被绘制。
本系列的下一篇文章将设定一个OpenGL的虚拟世界并使用Vertex3D 和 Triangle3D进行一些基本绘图。再后，我们将讨论变换，它使用线性代数在虚拟世界中移动物体。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[排序算法比较]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/04/29/sorting-algorithms/"/>
    <updated>2013-04-29T22:41:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/04/29/sorting-algorithms</id>
    <content type="html"><![CDATA[<p><img src="http://placekitten.com/640/320"></p>

<p>今天来比较一下众多排序算法。</p>

<p>1 快速排序（QuickSort）</p>

<p>快速排序是一个就地排序，分而治之，大规模递归的算法。从本质上来说，它是归并排序的就地版本。快速排序可以由下面四步组成。</p>

<pre><code>1. 如果不多于1个数据，直接返回。
2. 一般选择序列最左边的值作为支点数据。
3. 将序列分成2部分，一部分都大于支点数据，另外一部分都小于支点数据。
4. 对两边利用递归排序数列。
</code></pre>

<p>快速排序比大部分排序算法都要快O(nlogn)。尽管我们可以在某些特殊的情况下写出比快速排序快的算法，但是就通常情况而言，没有比它更快的了。快速排序是递归的，对于内存非常有限的机器来说，它不是一个好的选择。</p>

<!--more-->


<p>2 归并排序（MergeSort）</p>

<p>归并排序先分解要排序的序列，从1分成2，2分成4，依次分解，当分解到只有1个一组的时候，就可以排序这些分组，然后依次合并回原来的序列中，这样就可以排序所有数据。合并排序比堆排序稍微快一点，但是需要比堆排序多一倍的内存空间，因为它需要一个额外的数组。</p>

<p>3 堆排序（HeapSort）</p>

<p>堆排序适合于数据量非常大的场合（百万数据）。</p>

<p>堆排序不需要大量的递归或者多维的暂存数组。这对于数据量非常巨大的序列是合适的。比如超过数百万条记录，因为快速排序，归并排序都使用递归来设计算法，在数据量非常大的时候，可能会发生堆栈溢出错误。</p>

<p>堆排序会将所有的数据建成一个堆，最大的数据在堆顶，然后将堆顶数据和序列的最后一个数据交换。接下来再次重建堆，交换数据，依次下去，就可以排序所有的数据。</p>

<p>4 Shell排序（ShellSort）</p>

<p>Shell排序通过将数据分成不同的组，先对每一组进行排序，然后再对所有的元素进行一次插入排序，以减少数据交换和移动的次数。平均效率是O(nlogn)。其中分组的合理性会对算法产生重要的影响。现在多用D.E.Knuth的分组方法。</p>

<p>Shell排序比冒泡排序快5倍，比插入排序大致快2倍。Shell排序比起QuickSort，MergeSort，HeapSort慢很多。但是它相对比较简单，它适合于数据量在5000以下并且速度并不是特别重要的场合。它对于数据量较小的数列重复排序是非常好的。</p>

<p>5 插入排序（InsertSort）</p>

<p>插入排序通过把序列中的值插入一个已经排序好的序列中，直到该序列的结束。插入排序是对冒泡排序的改进。它比冒泡排序快2倍。一般不用在数据大于1000的场合下使用插入排序，或者重复排序超过200数据项的序列。</p>

<p>6 冒泡排序（BubbleSort）</p>

<p>冒泡排序是最慢的排序算法。在实际运用中它是效率最低的算法。它通过一趟又一趟地比较数组中的每一个元素，使较大的数据下沉，较小的数据上升。它是O(n<sup>2)的算法。</sup></p>

<p>7 交换排序（ExchangeSort）和选择排序（SelectSort）</p>

<p>这两种排序方法都是交换方法的排序算法，效率都是 O(n2)。在实际应用中处于和冒泡排序基本相同的地位。它们只是排序算法发展的初级阶段，在实际中使用较少。</p>

<p>8 基数排序（RadixSort）</p>

<p>基数排序和通常的排序算法并不走同样的路线。它是一种比较新颖的算法，但是它只能用于整数的排序，如果我们要把同样的办法运用到浮点数上，我们必须了解浮点数的存储格式，并通过特殊的方式将浮点数映射到整数上，然后再映射回去，这是非常麻烦的事情，因此，它的使用同样也不多。而且，最重要的是，这样算法也需要较多的存储空间。</p>

<p>9 总结</p>

<p>下面是一个总的表格，大致总结了我们常见的所有的排序算法的特点。</p>

<table class="table table-bordered table-striped table-condensed">
    <tr>
        <th width="10%">排序法</th>
        <th width="15%">平均时间</th>
        <th width="20%">最差情形</th>
        <th width="15%">是否稳定</th>
        <th width="15%">额外空间</th>
        <th width="25%">备注</th>
    </tr>
    <tr><td>冒泡</td><td>O(n^2)</td><td>O(n^2)</td><td>稳定</td><td>O(1)</td><td>n小时较好</td></tr>
    <tr><td>交换</td><td>O(n^2)</td><td>O(n^2)</td><td>不稳定</td><td>O(1)</td><td>n小时较好</td></tr>
    <tr><td>选择</td><td>O(n^2)</td><td>O(n^2)</td><td>不稳定</td><td>O(1)</td><td>n小时较好</td></tr>
    <tr><td>插入</td><td>O(n^2)</td><td>O(n^2)</td><td>稳定</td><td>O(1)</td><td>大部分已排序时较好</td></tr>
    <tr><td>基数</td><td>O(logRB)</td><td>O(logRB)</td><td>稳定</td><td>O(n)</td><td>B是真数(0-9)，R是基数(个十百)</td></tr>
    <tr><td>Shell</td><td>O(nlogn)</td><td>O(n^s) 1&lt;s&lt;2</td><td> 不稳定</td><td>O(1)</td><td>s是所选分组</td></tr>
    <tr><td>快速</td><td>O(nlogn)</td><td>O(n^2)</td><td>不稳定</td><td>O(nlogn)</td><td>n大时较好</td></tr>
    <tr><td>归并</td><td>O(nlogn)</td><td>O(nlogn)</td><td>稳定</td><td>O(1)</td><td>n大时较好</td></tr>
    <tr><td>堆</td><td>O(nlogn)</td><td>O(nlogn)</td><td>不稳定</td><td>O(1)</td><td>n大时较好</td></tr>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目管理的ONP原则]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/04/28/opn-principle/"/>
    <updated>2013-04-28T23:01:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/04/28/opn-principle</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://placekitten.com/240/320"></p>

<p>前阵子学到了一招，项目管理中关于预估的ONP原则。</p>


<p>顾名思义，O乐观估计，N普通估计，P悲观估计。</p>


<!--more-->


<p>当有一个新需求产生的时候，产品经理大表哥总是会问，“这个需要多长时间啊，最快什么时候能好？应该很简单的吧” 。</p>


<p>年轻气盛的小瘦就会回答了：“嗯，这个简单。两天帮你搞定。包在我身上。” 大表哥听了很高兴。这叫乐观估计。</p>


<p>曾吃过亏的老龚就会说：“这项工作我来做的话，需要4天完成。但考虑到各种不确定因素，保守估计8天吧。你的需求有哪次不是变来变去的？”大表哥羞愧的低下了头。这叫悲观估计。</p>


<p>见过世面的大师掐指一算：“老衲觉得需要4.3天，就算是5天吧。但也可能需要6天或者7天。” “大师，此话怎讲。说了等于白说。”</p>


<p>大师继续说：“其实佛祖托梦，给了我一个计算公式。套用即可。” “大师，您也太能忽悠了。”</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>μ = (O+4N+P)/6           #平均值 
</span><span class='line'>σ = (P-O)/6              #标准差
</span><span class='line'>U = μ or μ+1σ or μ+2σ    #估算值</span></code></pre></td></tr></table></div></figure>


<p>工作量预估实际上是一个概率分布问题。就拿刚才的例子来说，这个工作项有10%的可能性在2天内完成，15%的可能性在3天内完成，30%的可能性在4天内完成，25%的可能性在5天内完成，在6、7、8天内完成的可能性分别是10%、6%和3%。在1天以内或者9天以上完成的可能性基本为0。</p>


<p>当然，上述分布的情况比较理想化，只是用来举例。每次项目要如此进行概率估算，并且计算平均值和标准差，还是比较复杂的。为了简化计算，前人总结出了以上公式。</p>




<p>各位今后在进行工作量预估的时候不妨也这么试一下。先确定好合理的ONP，再套用公式。顺便把这套算法讲给产品经理听，做一个守信的专业程序员。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[唯一不变的只有变化]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/04/27/wei-yi-bu-bian-de-zhi-you-bian-hua/"/>
    <updated>2013-04-27T09:09:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/04/27/wei-yi-bu-bian-de-zhi-you-bian-hua</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://placekitten.com/180/240">
知名科幻小说家Cory Doctorow曾说：“铁匠在啤酒中洒下眼泪，悲叹自己没有办法在铁路时代卖马掌，但这并不会使他们的马掌更受欢迎。那些学习变成机械师的铁匠才会保住自己的饭碗。”</p>

<p>个人也好，团队也好，唯有快速顺应时代才能赢得未来，产品生产方式必须因时代而变。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/04/26/hello-world/"/>
    <updated>2013-04-26T23:47:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/04/26/hello-world</id>
    <content type="html"><![CDATA[<p><img src="http://placekitten.com/890/280"></p>
]]></content>
  </entry>
  
</feed>
