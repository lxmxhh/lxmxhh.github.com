<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SamXu's blog]]></title>
  <link href="http://lxmxhh.github.io/atom.xml" rel="self"/>
  <link href="http://lxmxhh.github.io/"/>
  <updated>2013-05-06T19:14:36+08:00</updated>
  <id>http://lxmxhh.github.io/</id>
  <author>
    <name><![CDATA[Sam Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Markdown: Syntax]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/05/06/markdown-syntax/"/>
    <updated>2013-05-06T16:28:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/05/06/markdown-syntax</id>
    <content type="html"><![CDATA[<p><strong>NOTE:</strong> This is Traditional Chinese Edition Document of
Markdown Syntax. If you are seeking for English Edition
Document. Please refer to <a href="http://daringfireball.net/projects/markdown/syntax">Markdown: Syntax</a>.</p>

<!--more-->


<h1>Markdown: Syntax</h1>

<ul>
<li><a href="#overview">概述</a>

<ul>
<li><a href="#philosophy">哲學</a></li>
<li><a href="#html">行內 HTML</a></li>
<li><a href="#autoescape">特殊字元自動轉換</a></li>
</ul>
</li>
<li><a href="#block">區塊元素</a>

<ul>
<li><a href="#p">段落和換行</a></li>
<li><a href="#header">標題</a></li>
<li><a href="#blockquote">區塊引言</a></li>
<li><a href="#list">清單</a></li>
<li><a href="#precode">程式碼區塊</a></li>
<li><a href="#hr">分隔線</a></li>
</ul>
</li>
<li><a href="#span">區段元素</a>

<ul>
<li><a href="#link">連結</a></li>
<li><a href="#em">強調</a></li>
<li><a href="#code">程式碼</a></li>
<li><a href="#img">圖片</a></li>
</ul>
</li>
<li><a href="#misc">其它</a>

<ul>
<li><a href="#backslash">跳脫字元</a></li>
<li><a href="#autolink">自動連結</a></li>
</ul>
</li>
<li><a href="#acknowledgement">感謝</a></li>
</ul>


<p><strong>注意：</strong>這份文件是用 Markdown 寫的，你可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md">看看它的原始檔</a> 。</p>

<hr />

<h2 id="overview">概述</h2>




<h3 id="philosophy">哲學</h3>


<p>Markdown 的目標是實現「易讀易寫」。</p>

<p>不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 語法受到一些既有 text-to-HTML 格式的影響，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/">atx</a>、<a href="http://textism.com/tools/textile/">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/">EtText</a>，然而最大靈感來源其實是純文字的電子郵件格式。</p>

<p>因此 Markdown 的語法全由標點符號所組成，並經過嚴謹慎選，是為了讓它們看起來就像所要表達的意思。像是在文字兩旁加上星號，看起來就像*強調*。Markdown 的清單看起來，嗯，就是清單。假如你有使用過電子郵件，區塊引言看起來就真的像是引用一段文字。</p>

<h3 id="html">行內 HTML</h3>


<p>Markdown 的語法有個主要的目的：用來作為一種網路內容的<em>寫作</em>用語言。</p>

<p>Markdown 不是要來取代 HTML，甚至也沒有要和它相似，它的語法種類不多，只和 HTML 的一部分有關係，重點<em>不是</em>要創造一種更容易寫作 HTML 文件的語法，我認為 HTML 已經很容易寫了，Markdown 的重點在於，它能讓文件更容易閱讀、編寫。HTML 是一種<em>發佈</em>的格式，Markdown 是一種<em>編寫</em>的格式，因此，Markdown 的格式語法只涵蓋純文字可以涵蓋的範圍。</p>

<p>不在 Markdown 涵蓋範圍之外的標籤，都可以直接在文件裡面用 HTML 撰寫。不需要額外標註這是 HTML 或是 Markdown；只要直接加標籤就可以了。</p>

<p>只有區塊元素──比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等標籤，必需在前後加上空行，以利與內容區隔。而且這些（元素）的開始與結尾標籤，不可以用 tab 或是空白來縮排。Markdown 的產生器有智慧型判斷，可以避免在區塊標籤前後加上沒有必要的 <code>&lt;p&gt;</code> 標籤。</p>

<p>舉例來說，在 Markdown 文件裡加上一段 HTML 表格：</p>

<pre><code>This is a regular paragraph.

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

This is another regular paragraph.
</code></pre>

<p>請注意，Markdown 語法在 HTML 區塊標籤中將不會被進行處理。例如，你無法在 HTML 區塊內使用 Markdown 形式的<code>*強調*</code>。</p>

<p>HTML 的區段標籤如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 則不受限制，可以在 Markdown 的段落、清單或是標題裡任意使用。依照個人習慣，甚至可以不用Markdown 格式，而採用 HTML 標籤來格式化。舉例說明：如果比較喜歡 HTML 的  <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 標籤，可以直接使用這些標籤，而不用 Markdown 提供的連結或是影像標示語法。</p>

<p>HTML 區段標籤和區塊標籤不同，在區段標籤的範圍內， Markdown 的語法是有效的。</p>

<h3 id="autoescape">特殊字元自動轉換</h3>


<p>在 HTML 文件中，有兩個字元需要特殊處理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符號用於起始標籤，<code>&amp;</code> 符號則用於標記 HTML 實體，如果你只是想要使用這些符號，你必須要使用實體的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p>

<p><code>&amp;</code> 符號其實很讓寫作網路文件的人感到困擾，如果你要打「AT&amp;T」 ，你必須要寫成「<code>AT&amp;amp;T</code>」 ，還得轉換網址內的 <code>&amp;</code> 符號，如果你要連結到：</p>

<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird
</code></pre>

<p>你必須要把網址轉成：</p>

<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird
</code></pre>

<p>才能放到連結標籤的 <code>href</code> 屬性裡。不用說也知道這很容易忘記，這也可能是 HTML 標準檢查所檢查到的錯誤中，數量最多的。</p>

<p>Markdown 允許你直接使用這些符號，但是你要小心跳脫字元的使用，如果你是在HTML 實體中使用 <code>&amp;</code> 符號的話，它不會被轉換，而在其它情形下，它則會被轉換成 <code>&amp;amp;</code>。所以你如果要在文件中插入一個著作權的符號，你可以這樣寫：</p>

<pre><code>&amp;copy;
</code></pre>

<p>Markdown 將不會對這段文字做修改，但是如果你這樣寫：</p>

<pre><code>AT&amp;T
</code></pre>

<p>Markdown 就會將它轉為：</p>

<pre><code>AT&amp;amp;T
</code></pre>

<p>類似的狀況也會發生在 <code>&lt;</code> 符號上，因為 Markdown 支援 <a href="#html">行內 HTML</a> ，如果你是使用 <code>&lt;</code> 符號作為 HTML 標籤使用，那 Markdown 也不會對它做任何轉換，但是如果你是寫：</p>

<pre><code>4 &lt; 5
</code></pre>

<p>Markdown 將會把它轉換為：</p>

<pre><code>4 &amp;lt; 5
</code></pre>

<p>不過需要注意的是，code 範圍內，不論是行內還是區塊， <code>&lt;</code> 和 <code>&amp;</code> 兩個符號都<em>一定</em>會被轉換成 HTML 實體，這項特性讓你可以很容易地用 Markdown 寫 HTML code （和 HTML 相對而言， HTML 語法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都轉換為 HTML 實體，才能在 HTML 文件裡面寫出 HTML code。）</p>

<hr />

<h2 id="block">區塊元素</h2>




<h3 id="p">段落和換行</h3>


<p>一個段落是由一個以上相連接的行句組成，而一個以上的空行則會切分出不同的段落（空行的定義是顯示上看起來像是空行，便會被視為空行。比方說，若某一行只包含空白和 tab，則該行也會被視為空行），一般的段落不需要用空白或斷行縮排。</p>

<p>「一個以上相連接的行句組成」這句話其實暗示了 Markdown 允許段落內的強迫斷行，這個特性和其他大部分的 text-to-HTML 格式不一樣（包括 MovableType 的「Convert Line Breaks」選項），其它的格式會把每個斷行都轉成 <code>&lt;br /&gt;</code> 標籤。</p>

<p>如果你<em>真的</em>想要插入 <code>&lt;br /&gt;</code> 標籤的話，在行尾加上兩個以上的空白，然後按 enter。</p>

<p>是的，這確實需要花比較多功夫來插入 <code>&lt;br /&gt;</code> ，但是「每個換行都轉換為 <code>&lt;br /&gt;</code>」的方法在 Markdown 中並不適合， Markdown 中 email 式的 <a href="#blockquote">區塊引言</a> 和多段落的 <a href="#list">清單</a> 在使用換行來排版的時候，不但更好用，還更好閱讀。</p>

<h3 id="header">標題</h3>


<p>Markdown 支援兩種標題的語法，<a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a> 和 <a href="http://www.aaronsw.com/2002/atx/">atx</a> 形式。</p>

<p>Setext 形式是用底線的形式，利用 <code>=</code> （最高階標題）和 <code>-</code> （第二階標題），例如：</p>

<pre><code>This is an H1
=============

This is an H2
-------------
</code></pre>

<p>任何數量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p>

<p>Atx 形式則是在行首插入 1 到 6 個 <code>#</code> ，對應到標題 1 到 6 階，例如：</p>

<pre><code># This is an H1

## This is an H2

###### This is an H6
</code></pre>

<p>你可以選擇性地「關閉」atx 樣式的標題，這純粹只是美觀用的，若是覺得這樣看起來比較舒適，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 數量也不用和開頭一樣（行首的井字數量決定標題的階數）：</p>

<pre><code># This is an H1 #

## This is an H2 ##

### This is an H3 ######
</code></pre>

<h3 id="blockquote">Blockquotes</h3>


<p>Markdown 使用 email 形式的區塊引言，如果你很熟悉如何在 email 信件中引言，你就知道怎麼在 Markdown 文件中建立一個區塊引言，那會看起來像是你強迫斷行，然後在每行的最前面加上 <code>&gt;</code> ：</p>

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&gt; 
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>Markdown 也允許你只在整個段落的第一行最前面加上 <code>&gt;</code> ：</p>

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>區塊引言可以有階層（例如：引言內的引言），只要根據層數加上不同數量的 <code>&gt;</code> ：</p>

<pre><code>&gt; This is the first level of quoting.
&gt;
&gt; &gt; This is nested blockquote.
&gt;
&gt; Back to the first level.
</code></pre>

<p>引言的區塊內也可以使用其他的 Markdown 語法，包括標題、清單、程式碼區塊等：</p>

<pre><code>&gt; ## This is a header.
&gt; 
&gt; 1.   This is the first list item.
&gt; 2.   This is the second list item.
&gt; 
&gt; Here's some example code:
&gt; 
&gt;     return shell_exec("echo $input | $markdown_script");
</code></pre>

<p>任何標準的文字編輯器都能簡單地建立 email 樣式的引言，例如 BBEdit ，你可以選取文字後然後從選單中選擇<em>增加引言階層</em>。</p>

<h3 id="list">清單</h3>


<p>Markdown 支援有序清單和無序清單。</p>

<p>無序清單使用星號、加號或是減號作為清單標記：</p>

<pre><code>*   Red
*   Green
*   Blue
</code></pre>

<p>等同於：</p>

<pre><code>+   Red
+   Green
+   Blue
</code></pre>

<p>也等同於：</p>

<pre><code>-   Red
-   Green
-   Blue
</code></pre>

<p>有序清單則使用數字接著一個英文句點：</p>

<pre><code>1.  Bird
2.  McHale
3.  Parish
</code></pre>

<p>很重要的一點是，你在清單標記上使用的數字並不會影響輸出的 HTML 結果，上面的清單所產生的 HTML 標記為：</p>

<pre><code>&lt;ol&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;McHale&lt;/li&gt;
&lt;li&gt;Parish&lt;/li&gt;
&lt;/ol&gt;
</code></pre>

<p>如果你的清單標記寫成：</p>

<pre><code>1.  Bird
1.  McHale
1.  Parish
</code></pre>

<p>或甚至是：</p>

<pre><code>3. Bird
1. McHale
8. Parish
</code></pre>

<p>你都會得到完全相同的 HTML 輸出。重點在於，你可以讓 Markdown 文件的清單數字和輸出的結果相同，或是你懶一點，你可以完全不用在意數字的正確性。</p>

<p>如果你使用懶惰的寫法，建議第一個項目最好還是從 1. 開始，因為 Markdown 未來可能會支援有序清單的 start 屬性。</p>

<p>清單項目標記通常是放在最左邊，但是其實也可以縮排，最多三個空白，項目標記後面則一定要接著至少一個空白或 tab。</p>

<p>要讓清單看起來更漂亮，你可以把內容用固定的縮排整理好：</p>

<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>但是如果你很懶，那也不一定需要：</p>

<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>如果清單項目間用空行分開， Markdown 會把項目的內容在輸出時用 <code>&lt;p&gt;</code>
標籤包起來，舉例來說：</p>

<pre><code>*   Bird
*   Magic
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;Magic&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>但是這個：</p>

<pre><code>*   Bird

*   Magic
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>清單項目可以包含多個段落，每個項目下的段落都必須縮排 4 個空白或是一個 tab ：</p>

<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>如果你每行都有縮排，看起來會看好很多，當然，再次地，如果你很懶惰，Markdown 也允許：</p>

<pre><code>*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
</code></pre>

<p>如果要在清單項目內放進引言，那 <code>&gt;</code> 就需要縮排：</p>

<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.
</code></pre>

<p>如果要放程式碼區塊的話，該區塊就需要縮排<em>兩次</em>，也就是 8 個空白或是兩個 tab：</p>

<pre><code>*   A list item with a code block:

        &lt;code goes here&gt;
</code></pre>

<p>當然，項目清單很可能會不小心產生，像是下面這樣的寫法：</p>

<pre><code>1986. What a great season.
</code></pre>

<p>換句話說，也就是在行首出現<em>數字-句點-空白</em>，要避免這樣的狀況，你可以在句點前面加上反斜線。</p>

<pre><code>1986\. What a great season.
</code></pre>

<h3 id="precode">程式碼區塊</h3>


<p>和程式相關的寫作或是標籤語言原始碼通常會有已經排版好的程式碼區塊，通常這些區塊我們並不希望它以一般段落文件的方式去排版，而是照原來的樣子顯示，Markdown 會用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 標籤來把程式碼區塊包起來。</p>

<p>要在 Markdown 中建立程式碼區塊很簡單，只要簡單地縮排 4 個空白或是 1 個 tab 就可以，例如，下面的輸入：</p>

<pre><code>This is a normal paragraph:

    This is a code block.
</code></pre>

<p>Markdown 會轉換成：</p>

<pre><code>&lt;p&gt;This is a normal paragraph:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is a code block.
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>這個每行一階的縮排（4 個空白或是 1 個 tab），都會被移除，例如：</p>

<pre><code>Here is an example of AppleScript:

    tell application "Foo"
        beep
    end tell
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application "Foo"
    beep
end tell
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>一個程式碼區塊會一直持續到沒有縮排的那一行（或是文件結尾）。</p>

<p>在程式碼區塊裡面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 會自動轉成 HTML 實體，這樣的方式讓你非常容易使用 Markdown 插入範例用的 HTML 原始碼，只需要複製貼上，再加上縮排就可以了，剩下的 Markdown 都會幫你處理，例如：</p>

<pre><code>    &lt;div class="footer"&gt;
        &amp;copy; 2004 Foo Corporation
    &lt;/div&gt;
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class="footer"&amp;gt;
    &amp;amp;copy; 2004 Foo Corporation
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>程式碼區塊中，一般的 Markdown 語法不會被轉換，像是星號便只是星號，這表示你可以很容易地以 Markdown 語法撰寫 Markdown 語法相關的文件。</p>

<h3 id="hr">分隔線</h3>


<p>你可以在一行中用三個或以上的星號、減號、底線來建立一個分隔線，行內不能有其他東西。你也可以在星號中間插入空白。下面每種寫法都可以建立分隔線：</p>

<pre><code>* * *

***

*****

- - -

---------------------------------------
</code></pre>

<hr />

<h2 id="span">區段元素</h2>




<h3 id="link">連結</h3>


<p>Markdown 支援兩種形式的連結語法： <em>行內</em>和<em>參考</em>兩種形式。</p>

<p>不管是哪一種，連結的文字都是用 [方括號] 來標記。</p>

<p>要建立一個行內形式的連結，只要在方塊括號後面馬上接著括號並插入網址連結即可，如果你還想要加上連結的 title 文字，只要在網址後面，用雙引號把 title 文字包起來即可，例如：</p>

<pre><code>This is [an example](http://example.com/ "Title") inline link.

[This link](http://example.net/) has no title attribute.
</code></pre>

<p>會產生：</p>

<pre><code>&lt;p&gt;This is &lt;a href="http://example.com/" title="Title"&gt;
an example&lt;/a&gt; inline link.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://example.net/"&gt;This link&lt;/a&gt; has no
title attribute.&lt;/p&gt;
</code></pre>

<p>如果你是要連結到同樣主機的資源，你可以使用相對路徑：</p>

<pre><code>See my [About](/about/) page for details.   
</code></pre>

<p>參考形式的連結使用另外一個方括號接在連結文字的括號後面，而在第二個方括號裡面要填入用以辨識連結的標籤：</p>

<pre><code>This is [an example][id] reference-style link.
</code></pre>

<p>你也可以選擇性地在兩個方括號中間加上空白：</p>

<pre><code>This is [an example] [id] reference-style link.
</code></pre>

<p>接著，在文件的任意處，你可以把這個標籤的連結內容定義出來：</p>

<pre><code>[id]: http://example.com/  "Optional Title Here"
</code></pre>

<p>連結定義的形式為：</p>

<ul>
<li>方括號，裡面輸入連結的辨識用標籤</li>
<li>接著一個冒號</li>
<li>接著一個以上的空白或 tab</li>
<li>接著連結的網址</li>
<li>選擇性地接著 title 內容，可以用單引號、雙引號或是括弧包著</li>
</ul>


<p>下面這三種連結的定義都是相同：</p>

<pre><code>[foo]: http://example.com/  "Optional Title Here"
[foo]: http://example.com/  'Optional Title Here'
[foo]: http://example.com/  (Optional Title Here)
</code></pre>

<p><strong>請注意：</strong>有一個已知的問題是 Markdown.pl 1.0.1 會忽略單引號包起來的連結 title。</p>

<p>連結網址也可以用方括號包起來：</p>

<pre><code>[id]: &lt;http://example.com/&gt;  "Optional Title Here"
</code></pre>

<p>你也可以把 title 屬性放到下一行，也可以加一些縮排，網址太長的話，這樣會比較好看：</p>

<pre><code>[id]: http://example.com/longish/path/to/resource/here
    "Optional Title Here"
</code></pre>

<p>網址定義只有在產生連結的時候用到，並不會直接出現在文件之中。</p>

<p>連結辨識標籤可以有字母、數字、空白和標點符號，但是並<em>不</em>區分大小寫，因此下面兩個連結是一樣的：</p>

<pre><code>[link text][a]
[link text][A]
</code></pre>

<p><em>預設的連結標籤</em>功能讓你可以省略指定連結標籤，這種情形下，連結標籤和連結文字會視為相同，要用預設連結標籤只要在連結文字後面加上一個空的方括號，如果你要讓 &#8220;Google&#8221; 連結到 google.com，你可以簡化成：</p>

<pre><code>[Google][]
</code></pre>

<p>然後定義連結內容：</p>

<pre><code>[Google]: http://google.com/
</code></pre>

<p>由於連結文字可能包含空白，所以這種簡化的標籤內也可以包含多個文字：</p>

<pre><code>Visit [Daring Fireball][] for more information.
</code></pre>

<p>然後接著定義連結：</p>

<pre><code>[Daring Fireball]: http://daringfireball.net/
</code></pre>

<p>連結的定義可以放在文件中的任何一個地方，我比較偏好直接放在連結出現段落的後面，你也可以把它放在文件最後面，就像是註解一樣。</p>

<p>下面是一個參考式連結的範例：</p>

<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        "Google"
  [2]: http://search.yahoo.com/  "Yahoo Search"
  [3]: http://search.msn.com/    "MSN Search"
</code></pre>

<p>如果改成用連結名稱的方式寫：</p>

<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        "Google"
  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"
  [msn]:    http://search.msn.com/    "MSN Search"
</code></pre>

<p>上面兩種寫法都會產生下面的 HTML。</p>

<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href="http://google.com/"
title="Google"&gt;Google&lt;/a&gt; than from
&lt;a href="http://search.yahoo.com/" title="Yahoo Search"&gt;Yahoo&lt;/a&gt;
or &lt;a href="http://search.msn.com/" title="MSN Search"&gt;MSN&lt;/a&gt;.&lt;/p&gt;
</code></pre>

<p>下面是用行內形式寫的同樣一段內容的 Markdown 文件，提供作為比較之用：</p>

<pre><code>I get 10 times more traffic from [Google](http://google.com/ "Google")
than from [Yahoo](http://search.yahoo.com/ "Yahoo Search") or
[MSN](http://search.msn.com/ "MSN Search").
</code></pre>

<p>參考式的連結其實重點不在於它比較好寫，而是它比較好讀，比較一下上面的範例，使用參考式的文章本身只有 81 個字元，但是用行內形式的連結卻會增加到 176 個字元，如果是用純 HTML 格式來寫，會有 234 個字元，在 HTML 格式中，標籤比文字還要多。</p>

<p>使用 Markdown 的參考式連結，可以讓文件更像是瀏覽器最後產生的結果，讓你可以把一些標記相關的資訊移到段落文字之外，你就可以增加連結而不讓文章的閱讀感覺被打斷。</p>

<h3 id="em">強調</h3>


<p>Markdown 使用星號（<code>*</code>）和底線（<code>_</code>）作為標記強調字詞的符號，被 <code>*</code> 或 <code>_</code> 包圍的字詞會被轉成用 <code>&lt;em&gt;</code> 標籤包圍，用兩個 <code>*</code> 或 <code>_</code> 包起來的話，則會被轉成 <code>&lt;strong&gt;</code>，例如：</p>

<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre>

<p>會轉成：</p>

<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre>

<p>你可以隨便用你喜歡的樣式，唯一的限制是，你用什麼符號開啟標籤，就要用什麼符號結束。</p>

<p>強調也可以直接插在文字中間：</p>

<pre><code>un*frigging*believable
</code></pre>

<p>但是如果你的 <code>*</code> 和 <code>_</code> 兩邊都有空白的話，它們就只會被當成普通的符號。</p>

<p>如果要在文字前後直接插入普通的星號或底線，你可以用反斜線：</p>

<pre><code>\*this text is surrounded by literal asterisks\*
</code></pre>

<h3 id="code">程式碼</h3>


<p>如果要標記一小段行內程式碼，你可以用反引號把它包起來（<code>`</code>），例如：</p>

<pre><code>Use the `printf()` function.
</code></pre>

<p>會產生：</p>

<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
</code></pre>

<p>如果要在程式碼區段內插入反引號，你可以用多個反引號來開啟和結束程式碼區段：</p>

<pre><code>``There is a literal backtick (`) here.``
</code></pre>

<p>這段語法會產生：</p>

<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;
</code></pre>

<p>程式碼區段的起始和結束端都可以放入一個空白，起始端後面一個，結束端前面一個，這樣你就可以在區段的一開始就插入反引號：</p>

<pre><code>A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
</code></pre>

<p>會產生：</p>

<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre>

<p>在程式碼區段內，<code>&amp;</code> 和方括號都會被轉成 HTML 實體，這樣會比較容易插入 HTML 原始碼，Markdown 會把下面這段：</p>

<pre><code>Please don't use any `&lt;blink&gt;` tags.
</code></pre>

<p>轉為：</p>

<pre><code>&lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre>

<p>你也可以這樣寫：</p>

<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.
</code></pre>

<p>以產生：</p>

<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;
</code></pre>

<h3 id="img">圖片</h3>


<p>很明顯地，要在純文字應用中設計一個 「自然」的語法來插入圖片是有一定難度的。</p>

<p>Markdown 使用一種和連結很相似的語法來標記圖片，同樣也允許兩種樣式： <em>行內</em>和<em>參考</em>。</p>

<p>行內圖片的語法看起來像是：</p>

<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg "Optional title")
</code></pre>

<p>詳細敘述如下：</p>

<ul>
<li>一個驚嘆號 <code>!</code></li>
<li>接著一個方括號，裡面放上圖片的替代文字</li>
<li>接著一個普通括號，裡面放上圖片的網址，最後還可以用引號包住並加上
選擇性的 &#8216;title&#8217; 文字。</li>
</ul>


<p>參考式的圖片語法則長得像這樣：</p>

<pre><code>![Alt text][id]
</code></pre>

<p>「id」是圖片參考的名稱，圖片參考的定義方式則和連結參考一樣：</p>

<pre><code>[id]: url/to/image  "Optional title attribute"
</code></pre>

<p>到目前為止， Markdown 還沒有辦法指定圖片的寬高，如果你需要的話，你可以使用普通的 <code>&lt;img&gt;</code> 標籤。</p>

<hr />

<h2 id="misc">其它</h2>




<h3 id="autolink">自動連結</h3>


<p>Markdown 支援比較簡短的自動連結形式來處理網址和電子郵件信箱，只要是用方括號包起來， Markdown 就會自動把它轉成連結，連結的文字就和連結位置一樣，例如：</p>

<pre><code>&lt;http://example.com/&gt;
</code></pre>

<p>Markdown 會轉為：</p>

<pre><code>&lt;a href="http://example.com/"&gt;http://example.com/&lt;/a&gt;
</code></pre>

<p>自動的郵件連結也很類似，只是 Markdown 會先做一個編碼轉換的過程，把文字字元轉成 16 進位碼的 HTML 實體，這樣的格式可以混淆一些不好的信箱地址收集機器人，例如：</p>

<pre><code>&lt;address@example.com&gt;
</code></pre>

<p>Markdown 會轉成：</p>

<pre><code>&lt;a href="&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;"&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre>

<p>在瀏覽器裡面，這段字串會變成一個可以點擊的「address@example.com」連結。</p>

<p>（這種作法雖然可以混淆不少的機器人，但並無法全部擋下來，不過這樣也比什麼都不做好些。無論如何，公開你的信箱終究會引來廣告信件的。）</p>

<h3 id="backslash">跳脫字元</h3>


<p>Markdown 可以利用反斜線來插入一些在語法中有其它意義的符號，例如：如果你想要用星號加在文字旁邊的方式來做出強調效果（但不用 <code>&lt;em&gt;</code> 標籤），你可以在星號的前面加上反斜線：</p>

<pre><code>\*literal asterisks\*
</code></pre>

<p>Markdown 支援在下面這些符號前面加上反斜線來幫助插入普通的符號：</p>

<pre><code>\   反斜線
`   反引號
*   星號
_   底線
{}  大括號
[]  方括號
()  括號
#   井字號
+   加號
-   減號
.   英文句點
!   驚嘆號
</code></pre>

<h2 id="acknowledgement">感謝</h2>


<p>感謝 <a href="https://twitter.com/#!/leafy7382">leafy7382</a> 協助翻譯，<a href="http://iamhlb.com/">hlb</a>、<a href="http://twitter.com/randylien">Randylien</a> 幫忙潤稿，<a href="https://twitter.com/#!/ethantw">ethantw</a> 的<a href="http://ethantw.net/projects/han/">漢字標準格式・CSS Reset</a>， <a href="http://kidwm.net/">WM</a> 回報文字錯誤。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android training lesson 1 - Designing for Multiple Screens]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/05/03/android-training-design-mutil-screen/"/>
    <updated>2013-05-03T19:59:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/05/03/android-training-design-mutil-screen</id>
    <content type="html"><![CDATA[<h2>Supporting Different Screen Sizes</h2>

<!--more-->


<p>This lesson shows you how to support different screen sizes by:</p>

<ul>
<li>Ensuring your layout can be adequately resized to fit the screen</li>
<li>Providing appropriate UI layout according to screen configuration</li>
<li>Ensuring the correct layout is applied to the correct screen</li>
<li>Providing bitmaps that scale correctly</li>
</ul>


<h2>Use &#8220;wrap_content&#8221; and &#8220;match_parent&#8221;</h2>

<p>To ensure that your layout is flexible and adapts to different screen sizes, you should use <code>"wrap_content"</code> and <code>"match_parent"</code> for the width and height of some view components. If you use <code>"wrap_content"</code>, the width or height of the view is set to the minimum size necessary to fit the content within that view, while <code>"match_parent"</code> (also known as <code>"fill_parent"</code> before API level 8) makes the component expand to match the size of its parent view.</p>

<p>By using the <code>"wrap_content"</code> and <code>"match_parent"</code> size values instead of hard-coded sizes, your views either use only the space required for that view or expand to fill the available space, respectively. For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:orientation="vertical"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>    &lt;LinearLayout android:layout_width="match_parent" 
</span><span class='line'>                  android:id="@+id/linearLayout1"  
</span><span class='line'>                  android:gravity="center"
</span><span class='line'>                  android:layout_height="50dp"&gt;
</span><span class='line'>        &lt;ImageView android:id="@+id/imageView1" 
</span><span class='line'>                   android:layout_height="wrap_content"
</span><span class='line'>                   android:layout_width="wrap_content"
</span><span class='line'>                   android:src="@drawable/logo"
</span><span class='line'>                   android:paddingRight="30dp"
</span><span class='line'>                   android:layout_gravity="left"
</span><span class='line'>                   android:layout_weight="0" /&gt;
</span><span class='line'>        &lt;View android:layout_height="wrap_content" 
</span><span class='line'>              android:id="@+id/view1"
</span><span class='line'>              android:layout_width="wrap_content"
</span><span class='line'>              android:layout_weight="1" /&gt;
</span><span class='line'>        &lt;Button android:id="@+id/categorybutton"
</span><span class='line'>                android:background="@drawable/button_bg"
</span><span class='line'>                android:layout_height="match_parent"
</span><span class='line'>                android:layout_weight="0"
</span><span class='line'>                android:layout_width="120dp"
</span><span class='line'>                style="@style/CategoryButtonStyle"/&gt;
</span><span class='line'>    &lt;/LinearLayout&gt;
</span><span class='line'>
</span><span class='line'>    &lt;fragment android:id="@+id/headlines" 
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="match_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>Notice how the sample uses <code>"wrap_content"</code> and <code>"match_parent"</code> for component sizes rather than specific dimensions. This allows the layout to adapt correctly to different screen sizes and orientations.</p>

<p>For example, this is what this layout looks like in portrait and landscape mode. Notice that the sizes of the components adapt automatically to the width and height:</p>

<p><img src="http://lxmxhh.github.io/images/blogs/130503/layout-hvga.png"><br/>
Figure 1. The News Reader sample app in portrait (left) and landscape (right).</p>

<h2>Use RelativeLayout</h2>

<p>You can construct fairly complex layouts using nested instances of <code>LinearLayout</code> and combinations of <code>"wrap_content"</code> and <code>"match_parent"</code> sizes. However, <code>LinearLayout</code> does not allow you to precisely control the spacial relationships of child views; views in a <code>LinearLayout</code> simply line up side-by-side. If you need child views to be oriented in variations other than a straight line, a better solution is often to use a <code>RelativeLayout</code>, which allows you to specify your layout in terms of the spacial relationships between components. For instance, you can align one child view on the left side and another view on the right side of the screen.</p>

<p>For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>    &lt;TextView
</span><span class='line'>        android:id="@+id/label"
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:text="Type here:"/&gt;
</span><span class='line'>    &lt;EditText
</span><span class='line'>        android:id="@+id/entry"
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:layout_below="@id/label"/&gt;
</span><span class='line'>    &lt;Button
</span><span class='line'>        android:id="@+id/ok"
</span><span class='line'>        android:layout_width="wrap_content"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:layout_below="@id/entry"
</span><span class='line'>        android:layout_alignParentRight="true"
</span><span class='line'>        android:layout_marginLeft="10dp"
</span><span class='line'>        android:text="OK" /&gt;
</span><span class='line'>    &lt;Button
</span><span class='line'>        android:layout_width="wrap_content"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:layout_toLeftOf="@id/ok"
</span><span class='line'>        android:layout_alignTop="@id/ok"
</span><span class='line'>        android:text="Cancel" /&gt;
</span><span class='line'>&lt;/RelativeLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>Figure 2 shows how this layout appears on a QVGA screen.</p>

<p><img src="http://lxmxhh.github.io/images/blogs/130503/relativelayout1.png"><br/>
Figure 2. Screenshot on a QVGA screen (small screen).</p>

<p>Figure 3 shows how it appears on a larger screen.</p>

<p><img src="http://lxmxhh.github.io/images/blogs/130503/relativelayout2.png"><br/>
Figure 3. Screenshot on a WSVGA screen (large screen).</p>

<p>Notice that although the size of the components changed, their spatial relationships are preserved as specified by the <code>RelativeLayout.LayoutParams</code>.</p>

<h2>Use Size Qualifiers</h2>

<p>There&#8217;s only so much mileage you can get from a flexible layout or relative layout like the one in the previous sections. While those layouts adapt to different screens by stretching the space within and around components, they may not provide the best user experience for each screen size. Therefore, your application should not only implement flexible layouts, but should also provide several alternative layouts to target different screen configurations. You do so by using <code>configuration qualifiers</code>, which allows the runtime to automatically select the appropriate resource based on the current device’s configuration (such as a different layout design for different screen sizes).</p>

<p>For example, many applications implement the &#8220;two pane&#8221; pattern for large screens (the app might show a list of items on one pane and the content on another pane). Tablets and TVs are large enough for both panes to fit simultaneously on screen, but phone screens have to show them separately. So, to implement these layouts, you could have the following files:</p>

<p><code>res/layout/main.xml</code>, single-pane (default) layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:orientation="vertical"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="match_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/layout-large/main.xml</code>, two-pane layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="fill_parent"
</span><span class='line'>    android:layout_height="fill_parent"
</span><span class='line'>    android:orientation="horizontal"&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="400dp"
</span><span class='line'>              android:layout_marginRight="10dp"/&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/article"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.ArticleFragment"
</span><span class='line'>              android:layout_width="fill_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>Notice the <code>large</code> qualifier in the directory name of the second layout. This layout will be selected on devices with screens classified as large (for example, 7&#8221; tablets and above). The other layout (without qualifiers) will be selected for smaller devices.</p>

<p>Use the Smallest-width Qualifier
One of the difficulties developers had in pre-3.2 Android devices was the &#8220;large&#8221; screen size bin, which encompasses the Dell Streak, the original Galaxy Tab, and 7&#8221; tablets in general. However, many applications may want to show different layouts for different devices in this category (such as for 5&#8221; and 7&#8221; devices), even though they are all considered to be &#8220;large&#8221; screens. That&#8217;s why Android introduced the &#8220;Smallest-width&#8221; qualifier (amongst others) in Android 3.2.</p>

<p>The Smallest-width qualifier allows you to target screens that have a certain minimum width given in dp. For example, the typical 7&#8221; tablet has a minimum width of 600 dp, so if you want your UI to have two panes on those screens (but a single list on smaller screens), you can use the same two layouts from the previous section for single and two-pane layouts, but instead of the <code>large</code> size qualifier, use <code>sw600dp</code> to indicate the two-pane layout is for screens on which the smallest-width is 600 dp:</p>

<p><code>res/layout/main.xml</code>, single-pane (default) layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:orientation="vertical"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="match_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/layout-sw600dp/main.xml</code>, two-pane layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="fill_parent"
</span><span class='line'>    android:layout_height="fill_parent"
</span><span class='line'>    android:orientation="horizontal"&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="400dp"
</span><span class='line'>              android:layout_marginRight="10dp"/&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/article"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.ArticleFragment"
</span><span class='line'>              android:layout_width="fill_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>This means that devices whose smallest width is greater than or equal to 600dp will select the <code>layout-sw600dp/main.xml</code> (two-pane) layout, while smaller screens will select the <code>layout/main.xml</code> (single-pane) layout.</p>

<p>However, this won&#8217;t work well on pre-3.2 devices, because they don&#8217;t recognize <code>sw600dp</code> as a size qualifier, so you still have to use the <code>large</code> qualifier as well. So, you should have a file named <code>res/layout-large/main.xml</code> which is identical to <code>res/layout-sw600dp/main.xml</code>. In the next section you&#8217;ll see a technique that allows you to avoid duplicating the layout files this way.</p>

<h2>Use Layout Aliases</h2>

<p>The smallest-width qualifier is available only on Android 3.2 and above. Therefore, you should also still use the abstract size bins (small, normal, large and xlarge) to be compatible with earlier versions. For example, if you want to design your UI so that it shows a single-pane UI on phones but a multi-pane UI on 7&#8221; tablets, TVs and other large devices, you&#8217;d have to supply these files:</p>

<ul>
<li><code>res/layout/main.xml</code>: single-pane layout</li>
<li><code>res/layout-large</code>: multi-pane layout</li>
<li><code>res/layout-sw600dp</code>: multi-pane layout
The last two files are identical, because one of them will be matched by Android 3.2 devices, and the other one is for the benefit of tablets and TVs with earlier versions of Android.</li>
</ul>


<p>To avoid this duplication of the same file for tablets and TVs (and the maintenance headache resulting from it), you can use alias files. For example, you can define the following layouts:</p>

<ul>
<li><code>res/layout/main.xml</code>, single-pane layout</li>
<li><code>res/layout/main_twopanes.xml</code>, two-pane layout
And add these two files:</li>
</ul>


<p><code>res/values-large/layout.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main" type="layout"&gt;@layout/main_twopanes&lt;/item&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/values-sw600dp/layout.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main" type="layout"&gt;@layout/main_twopanes&lt;/item&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<p>These latter two files have identical content, but they don’t actually define the layout. They merely set up <code>main</code> to be an alias to <code>main_twopanes</code>. Since these files have <code>large</code> and <code>sw600dp</code> selectors, they are applied to tablets and TVs regardless of Android version (pre-3.2 tablets and TVs match <code>large</code>, and post-3.2 will match <code>sw600dp</code>).</p>

<h2>Use Orientation Qualifiers</h2>

<p>Some layouts work well in both landscape and portrait orientations, but most of them can benefit from adjustments. In the News Reader sample app, here is how the layout behaves in each screen size and orientation:</p>

<ul>
<li>small screen, portrait: single pane, with logo</li>
<li>small screen, landscape: single pane, with logo</li>
<li>7&#8221; tablet, portrait: single pane, with action bar</li>
<li>7&#8221; tablet, landscape: dual pane, wide, with action bar</li>
<li>10&#8221; tablet, portrait: dual pane, narrow, with action bar</li>
<li>10&#8221; tablet, landscape: dual pane, wide, with action bar</li>
<li>TV, landscape: dual pane, wide, with action bar
So each of these layouts is defined in an XML file in the <code>res/layout/ directory</code>. To then assign each layout to the various screen configurations, the app uses layout aliases to match them to each configuration:</li>
</ul>


<p><code>res/layout/onepane.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:orientation="vertical"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="match_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/layout/onepane_with_bar.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:orientation="vertical"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>    &lt;LinearLayout android:layout_width="match_parent" 
</span><span class='line'>                  android:id="@+id/linearLayout1"  
</span><span class='line'>                  android:gravity="center"
</span><span class='line'>                  android:layout_height="50dp"&gt;
</span><span class='line'>        &lt;ImageView android:id="@+id/imageView1" 
</span><span class='line'>                   android:layout_height="wrap_content"
</span><span class='line'>                   android:layout_width="wrap_content"
</span><span class='line'>                   android:src="@drawable/logo"
</span><span class='line'>                   android:paddingRight="30dp"
</span><span class='line'>                   android:layout_gravity="left"
</span><span class='line'>                   android:layout_weight="0" /&gt;
</span><span class='line'>        &lt;View android:layout_height="wrap_content" 
</span><span class='line'>              android:id="@+id/view1"
</span><span class='line'>              android:layout_width="wrap_content"
</span><span class='line'>              android:layout_weight="1" /&gt;
</span><span class='line'>        &lt;Button android:id="@+id/categorybutton"
</span><span class='line'>                android:background="@drawable/button_bg"
</span><span class='line'>                android:layout_height="match_parent"
</span><span class='line'>                android:layout_weight="0"
</span><span class='line'>                android:layout_width="120dp"
</span><span class='line'>                style="@style/CategoryButtonStyle"/&gt;
</span><span class='line'>    &lt;/LinearLayout&gt;
</span><span class='line'>
</span><span class='line'>    &lt;fragment android:id="@+id/headlines" 
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="match_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/layout/twopanes.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="fill_parent"
</span><span class='line'>    android:layout_height="fill_parent"
</span><span class='line'>    android:orientation="horizontal"&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="400dp"
</span><span class='line'>              android:layout_marginRight="10dp"/&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/article"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.ArticleFragment"
</span><span class='line'>              android:layout_width="fill_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/layout/twopanes_narrow.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="fill_parent"
</span><span class='line'>    android:layout_height="fill_parent"
</span><span class='line'>    android:orientation="horizontal"&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="200dp"
</span><span class='line'>              android:layout_marginRight="10dp"/&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/article"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.ArticleFragment"
</span><span class='line'>              android:layout_width="fill_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now that all possible layouts are defined, it&#8217;s just a matter of mapping the correct layout to each configuration using the configuration qualifiers. You can now do it using the layout alias technique:</p>

<p><code>res/values/layouts.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main_layout" type="layout"&gt;@layout/onepane_with_bar&lt;/item&gt;
</span><span class='line'>    &lt;bool name="has_two_panes"&gt;false&lt;/bool&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/values-sw600dp-land/layouts.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main_layout" type="layout"&gt;@layout/twopanes&lt;/item&gt;
</span><span class='line'>    &lt;bool name="has_two_panes"&gt;true&lt;/bool&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/values-sw600dp-port/layouts.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main_layout" type="layout"&gt;@layout/onepane&lt;/item&gt;
</span><span class='line'>    &lt;bool name="has_two_panes"&gt;false&lt;/bool&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/values-large-land/layouts.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main_layout" type="layout"&gt;@layout/twopanes&lt;/item&gt;
</span><span class='line'>    &lt;bool name="has_two_panes"&gt;true&lt;/bool&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>res/values-large-port/layouts.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main_layout" type="layout"&gt;@layout/twopanes_narrow&lt;/item&gt;
</span><span class='line'>    &lt;bool name="has_two_panes"&gt;true&lt;/bool&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Use Nine-patch Bitmaps</h2>

<p>Supporting different screen sizes usually means that your image resources must also be capable of adapting to different sizes. For example, a button background must fit whichever button shape it is applied to.</p>

<p>If you use simple images on components that can change size, you will quickly notice that the results are somewhat less than impressive, since the runtime will stretch or shrink your images uniformly. The solution is using nine-patch bitmaps, which are specially formatted PNG files that indicate which areas can and cannot be stretched.</p>

<p>Therefore, when designing bitmaps that will be used on components with variable size, always use nine-patches. To convert a bitmap into a nine-patch, you can start with a regular image (figure 4, shown with in 4x zoom for clarity).</p>

<p><img src="http://lxmxhh.github.io/images/blogs/130503/button.png"><br/>
Figure 4. button.png</p>

<p>And then run it through the <code>draw9patch</code> utility of the SDK (which is located in the <code>tools/</code> directory), in which you can mark the areas that should be stretched by drawing pixels along the left and top borders. You can also mark the area that should hold the content by drawing pixels along the right and bottom borders, resulting in figure 5.</p>

<p><img src="http://lxmxhh.github.io/images/blogs/130503/button_with_marks.png"><br/>
Figure 5. button.9.png</p>

<p>Notice the black pixels along the borders. The ones on the top and left borders indicate the places where the image can be stretched, and the ones on the right and bottom borders indicate where the content should be placed.</p>

<p>Also, notice the <code>.9.png</code> extension. You must use this extension, since this is how the framework detects that this is a nine-patch image, as opposed to a regular PNG image.</p>

<p>When you apply this background to a component (by setting <code>android:background="@drawable/button"</code>), the framework stretches the image correctly to accommodate the size of the button, as shown in various sizes in figure 6.</p>

<p><img src="http://lxmxhh.github.io/images/blogs/130503/buttons_stretched.png"><br/>
Figure 6. A button using the button.9.png nine-patch in various sizes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GL从头学（一）]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/04/30/learning-opengl/"/>
    <updated>2013-04-30T22:42:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/04/30/learning-opengl</id>
    <content type="html"><![CDATA[<p>进入游戏行业已经8年了，虽然一直从事的图形图像相关的开发，接触的一直都是微软的DX，从未有闲暇去了解一下鼻祖OpenGL。之前的红宝书也不知道哪里去了，最近发现再版，立马入手了。
亚马逊链接： <a href="http://www.amazon.cn/gp/aw/d/B003D7LWI6/ref=mp_s_a_1?qid=1367829548&amp;sr=8-1&amp;pi=SL75">OpenGL编程指南</a></p>

<!--more-->


<h2>OpenGL 数据类型</h2>

<p>首先我们要讨论的是OpenGL的数据类型。因为OpenGL是一个跨平台的API，数据类型的大小会随使用的编程语言以及处理器（64位，32位，16位）等的不同而不同，所以OpenGL定义了自己的数据类型。当传递数据到OpenGL时，你应该坚持使用这些OpenGL的数据类型，从而保证传递数据的尺寸和精度正确。不这样做的后果是可能会导致无法预料的结果或由于运行时的数据转换造成效率低下。不论平台或语言实现的OpenGL都采用这种方式定义数据类型以保证在各平台上数据的尺寸一致，并使平台间OpenGL代码移植更为容易。
下面是OpenGL的各种数据类型:</p>

<ul>
<li> GLenum: 用于GL枚举的无符号整型。通常用于通知OpenGL由指针传递的存储于数组中数据的类型（例如，GL_FLOAT用于指示数组由GLfloat组成）。</li>
<li> GLboolean: 用于单布尔值。OpenGL ES还定义了其自己的“真”和“假”值（GL_TRUE和GL_FALSE）以避免平台和语言的差别。当向OpenGL传递布尔值时，请使用这些值而不是使用YES或NO（尽管由于它们的定义实际没有区别，即使你不小心使用了YES或NO。但是，使用GL-定义值是一个好的习惯。）</li>
<li> GLbitfield: 用于将多个布尔值（最多32个）打包到单个使用位操作变量的四字节整型。我们将在第一次使用位域变量时详细介绍，请参阅 wikipedia</li>
<li> GLbyte: 有符号单字节整型，包含数值从-128 到 127</li>
<li> GLshort: 有符号双字节整型，包含数值从−32,768 到 32,767</li>
<li> GLint: 有符号四字节整型，包含数值从−2,147,483,648 到 2,147,483,647</li>
<li> GLsizei: 有符号四字节整型，用于代表数据的尺寸（字节），类似于C中的size_t</li>
<li> GLubyte: 无符号单字节整型，包含数值从0 到 255。</li>
<li> GLushort: 无符号双字节整型，包含数值从0 到 65,535</li>
<li> GLuint: 无符号四字节整型，包含数值从0 到 4,294,967,295</li>
<li> GLfloat: 四字节精度IEEE 754-1985 浮点数</li>
<li> GLclampf: 这也是四字节精度浮点数，但OpenGL使用GLclampf特别表示数值为0.0 到 1.0</li>
<li> GLvoid:void值用于指示一个函数没有返回值，或没有参数</li>
<li> GLfixed: 定点数 使用整型数存储实数。由于大部分计算机处理器在处理整型数比处理浮点数快很多，这通常是对3D系统的优化方式。但因为iPhone具有用于浮点运算的矢量处理器，我们将不讨论定点运算或GLfixed数据类型。</li>
<li> GLclampx: 另一种定点型，用于使用定点运算来表示0.0 到 1.0之间的实数。正如GLfixed，我们不会讨论或使用它。</li>
</ul>


<p>OpenGL ES （至少iPhone目前所使用的版本）不支持8字节（64位）数据类型，如long或double。OpenGL 其实具有这些大型数据类型，但考虑到大部分嵌入式设备屏幕尺寸以及可能为它们所写的程序类型而且使用它们有可能对性能造成不利的影响，最后的决定是在OpenGL ES中排除这些数据类型。</p>

<h2>点或顶点</h2>

<p>3D图像的最小单位称为 点（point）或者顶点vertex。它们代表三维空间中的一个点并用来建造更复杂的物体。多边形就是由点构成，而物体是由多个多边形组成。尽管通常OpenGL支持多种多边形，但OpenGL ES只支持三边形（即三角形）。
如果你回忆高中学过的几何学，你可能会记得所谓笛卡尔坐标。 基本概念是在空间中任选一点，称作原点。 然后你可以通过参照原点并使用三个代表三维的数值指定空间中的任意一点，坐标是由三个想象的通过原点线表示的。从左至右的想象直线叫x-轴。沿着x-轴从左至右数值变大，向左移动数值变小。原点左方x为负值，右边为正值。另外两轴同理。沿y轴向上，y值增加，向下y值减小。原点上方y为正，原点下方为负。对于z轴，当物体离开观察者，数值变小，向观察者移动（或超出观察者），数值变大。原点前方z值为正，原点之后为负。下图帮助说明了这一点：</p>

<p><img src="http://lxmxhh.github.io/images/blogs/130430/gl1.png"><br/>
Note: iPhone上另一种绘图框架Core Graphics使用了稍微不同的坐标系统，当向屏幕上方移动时y值减小，而向下移动y值增加。</p>

<p>沿各轴增加或减小的数值是以任意刻度进行的 – 它们不代表任何真实单位，如英尺，英寸或米等。你可以选择任何对你的程序有意义的刻度。如果你想设计的游戏以英尺为单位，你可以那样做。如果你希望单位为毫米，同样可行。OpenGL不管它对最终用户代表什么，只是将它作为单位处理，保证它们具有相同的距离。
由于任何物体在三维空间中的方位可以由三个数值表示，物体的位置通常在OpenGL中由使用一个三维数组的三个GLfloat变量表示，数组中的第一项（索引0）为x位置，第二项（索引1）为y位置，第三项（索引2）为z位置。下面是一个创建OpenGL ES顶点的简单例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GLfloat vertex[3];
</span><span class='line'>vertex[0] = 10.0;       // x
</span><span class='line'>vertex[1] = 23.75;      // y    
</span><span class='line'>vertex[2] = -12.532;    // z</span></code></pre></td></tr></table></div></figure>


<p>在OpenGL ES中，通常将场景中所有构成所有或部分物体的提交为顶点数组。一个顶点数组是包括场景中部分或所有顶点数据的简单数组。我将在系列的下一篇教程中讨论，有关顶点数组要记住的是它们的大小是基于呈现的顶点数乘以三（三维空间绘图）或二（二维空间绘图）。所以一个包含六个三维空间中的三角形的顶点数组由54个GLfloat组成，因为每个三角形有三个顶点，而每个顶点有三个坐标，即6 x 3 x 3 = 54。
处理所有这些GLfloat是很痛苦的事情。幸运的是，有一个容易的方法。我们可以定义一个数据结构了保存多个顶点，像这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef struct { 
</span><span class='line'>    GLfloat x;
</span><span class='line'>    GLfloat y;
</span><span class='line'>    GLfloat z;
</span><span class='line'>} Vertex3D;</span></code></pre></td></tr></table></div></figure>


<p>通过这样做，我们的代码可读性更强：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vertex3D vertex;
</span><span class='line'>vertex.x = 10.0;
</span><span class='line'>vertex.y = 23.75;
</span><span class='line'>vertex.z = -12.532;</span></code></pre></td></tr></table></div></figure>


<p>现在由于Vertex3D由三个GLfloat组成，向Vertex3D传递指针与向数组传递一个包含三个GLfloat的数组的指针完全一样。对于电脑而言毫无分别；两者具有同样的尺寸和同样的字节数以及OpenGL需要的同样的顺序。将数据分组到数据结构只是让程序员感到更容易，处理起来更方便。如果你下载了文章开头处的Xcode模板，你会发现此数据结构以及我后面将讨论的各种函数都定义在文件OpenGLCommon.h中。还有一个内联函数用于创建单个顶点：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static inline Vertex3D Vertex3DMake(CGFloat inX, CGFloat inY, CGFloat inZ)
</span><span class='line'>{
</span><span class='line'>    Vertex3D ret;
</span><span class='line'>    ret.x = inX;
</span><span class='line'>    ret.y = inY;
</span><span class='line'>    ret.z = inZ;
</span><span class='line'>    return ret;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如果你回忆起几何学（如果不记得也不要紧）的内容，你会知道空间中两点间的距离是使用下面公式计算的：<br/>
<img class="center" src="http://lxmxhh.github.io/images/blogs/130430/gl2.png">
我们可以在一个简单的内联函数中实现这个公式来计算三维空间中任何两点间的直线距离：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static inline GLfloat Vertex3DCalculateDistanceBetweenVertices (Vertex3D first, Vertex3D second)
</span><span class='line'>{
</span><span class='line'>    GLfloat deltaX = second.x - first.x;
</span><span class='line'>    GLfloat deltaY = second.y - first.y;
</span><span class='line'>    GLfloat deltaZ = second.z - first.z;
</span><span class='line'>    return sqrtf(deltaX*deltaX + deltaY*deltaY + deltaZ*deltaZ );
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<h2>三角形</h2>

<p>由于OpenGL ES仅支持三角形，因此我们可以通过创建一个数据结构将三个顶点组合成一个三角形物体。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef struct {
</span><span class='line'>    Vertex3D v1;
</span><span class='line'>    Vertex3D v2;
</span><span class='line'>    Vertex3D v3;
</span><span class='line'>} Triangle3D;</span></code></pre></td></tr></table></div></figure>


<p>一个Triangle3D实际上与一个九个GLfloat构成的数组是完全一样的，因为我们通过顶点和三角形而不是GLfloat数组来构建物体，所以它能帮助我们更容易地处理我们的代码。
然而关于三角形你需要知道更多的事情。在OpenGL中有一个概念叫卷绕(winding)， 它表示顶点绘制的次序是重要的。不像真实世界中的物体，OpenGL中的多边形通常都不会有两面。它们只有一面，被当做front face（前面）， 三角形只有其front face面对观察者时才可见。可以设置OpenGL将多边形作为两面处理，但默认状态下，三角形只有一个可见面。通过知道哪一个面是多边形的前面或可见面，才能使OpenGL只做一半的计算。
尽管有时多边形也可以独立存在，需要绘制其背面，但通常三角形是一个大物体的一部分，其面对物体内部的一面永远也不可见。不被绘制的一面称为backface（背面），OpenGL是通过观察顶点的绘制次序来确定front face和backface的。以反时针次序绘制顶点的构成的面是frontface（默认，可以改变）。由于OpenGL可以很容易确定哪个三角形对用户可见，所以它使用了一种称为Backface Culling（隐面消除） 的技术来避免绘制视窗中多边形的不可见面。下一篇文章将讨论视窗，现在你可将其想象成一个虚拟摄像或观察OpenGL世界的虚拟窗口。<br/>
<img src="http://lxmxhh.github.io/images/blogs/130430/gl3.png"><br/>
上图中，左边青色的三角形是backface，因此将不可见。而右方的三角形是frontface，所以将被绘制。
本系列的下一篇文章将设定一个OpenGL的虚拟世界并使用Vertex3D 和 Triangle3D进行一些基本绘图。再后，我们将讨论变换，它使用线性代数在虚拟世界中移动物体。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[排序算法比较]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/04/29/sorting-algorithms/"/>
    <updated>2013-04-29T22:41:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/04/29/sorting-algorithms</id>
    <content type="html"><![CDATA[<p><img src="http://placekitten.com/640/320"></p>

<p>今天来比较一下众多排序算法。</p>

<p>1 快速排序（QuickSort）</p>

<p>快速排序是一个就地排序，分而治之，大规模递归的算法。从本质上来说，它是归并排序的就地版本。快速排序可以由下面四步组成。</p>

<pre><code>1. 如果不多于1个数据，直接返回。
2. 一般选择序列最左边的值作为支点数据。
3. 将序列分成2部分，一部分都大于支点数据，另外一部分都小于支点数据。
4. 对两边利用递归排序数列。
</code></pre>

<p>快速排序比大部分排序算法都要快O(nlogn)。尽管我们可以在某些特殊的情况下写出比快速排序快的算法，但是就通常情况而言，没有比它更快的了。快速排序是递归的，对于内存非常有限的机器来说，它不是一个好的选择。</p>

<!--more-->


<p>2 归并排序（MergeSort）</p>

<p>归并排序先分解要排序的序列，从1分成2，2分成4，依次分解，当分解到只有1个一组的时候，就可以排序这些分组，然后依次合并回原来的序列中，这样就可以排序所有数据。合并排序比堆排序稍微快一点，但是需要比堆排序多一倍的内存空间，因为它需要一个额外的数组。</p>

<p>3 堆排序（HeapSort）</p>

<p>堆排序适合于数据量非常大的场合（百万数据）。</p>

<p>堆排序不需要大量的递归或者多维的暂存数组。这对于数据量非常巨大的序列是合适的。比如超过数百万条记录，因为快速排序，归并排序都使用递归来设计算法，在数据量非常大的时候，可能会发生堆栈溢出错误。</p>

<p>堆排序会将所有的数据建成一个堆，最大的数据在堆顶，然后将堆顶数据和序列的最后一个数据交换。接下来再次重建堆，交换数据，依次下去，就可以排序所有的数据。</p>

<p>4 Shell排序（ShellSort）</p>

<p>Shell排序通过将数据分成不同的组，先对每一组进行排序，然后再对所有的元素进行一次插入排序，以减少数据交换和移动的次数。平均效率是O(nlogn)。其中分组的合理性会对算法产生重要的影响。现在多用D.E.Knuth的分组方法。</p>

<p>Shell排序比冒泡排序快5倍，比插入排序大致快2倍。Shell排序比起QuickSort，MergeSort，HeapSort慢很多。但是它相对比较简单，它适合于数据量在5000以下并且速度并不是特别重要的场合。它对于数据量较小的数列重复排序是非常好的。</p>

<p>5 插入排序（InsertSort）</p>

<p>插入排序通过把序列中的值插入一个已经排序好的序列中，直到该序列的结束。插入排序是对冒泡排序的改进。它比冒泡排序快2倍。一般不用在数据大于1000的场合下使用插入排序，或者重复排序超过200数据项的序列。</p>

<p>6 冒泡排序（BubbleSort）</p>

<p>冒泡排序是最慢的排序算法。在实际运用中它是效率最低的算法。它通过一趟又一趟地比较数组中的每一个元素，使较大的数据下沉，较小的数据上升。它是O(n<sup>2)的算法。</sup></p>

<p>7 交换排序（ExchangeSort）和选择排序（SelectSort）</p>

<p>这两种排序方法都是交换方法的排序算法，效率都是 O(n2)。在实际应用中处于和冒泡排序基本相同的地位。它们只是排序算法发展的初级阶段，在实际中使用较少。</p>

<p>8 基数排序（RadixSort）</p>

<p>基数排序和通常的排序算法并不走同样的路线。它是一种比较新颖的算法，但是它只能用于整数的排序，如果我们要把同样的办法运用到浮点数上，我们必须了解浮点数的存储格式，并通过特殊的方式将浮点数映射到整数上，然后再映射回去，这是非常麻烦的事情，因此，它的使用同样也不多。而且，最重要的是，这样算法也需要较多的存储空间。</p>

<p>9 总结</p>

<p>下面是一个总的表格，大致总结了我们常见的所有的排序算法的特点。</p>

<table class="table table-bordered table-striped table-condensed">
    <tr>
        <th width="10%">排序法</th>
        <th width="15%">平均时间</th>
        <th width="20%">最差情形</th>
        <th width="15%">是否稳定</th>
        <th width="15%">额外空间</th>
        <th width="25%">备注</th>
    </tr>
    <tr><td>冒泡</td><td>O(n^2)</td><td>O(n^2)</td><td>稳定</td><td>O(1)</td><td>n小时较好</td></tr>
    <tr><td>交换</td><td>O(n^2)</td><td>O(n^2)</td><td>不稳定</td><td>O(1)</td><td>n小时较好</td></tr>
    <tr><td>选择</td><td>O(n^2)</td><td>O(n^2)</td><td>不稳定</td><td>O(1)</td><td>n小时较好</td></tr>
    <tr><td>插入</td><td>O(n^2)</td><td>O(n^2)</td><td>稳定</td><td>O(1)</td><td>大部分已排序时较好</td></tr>
    <tr><td>基数</td><td>O(logRB)</td><td>O(logRB)</td><td>稳定</td><td>O(n)</td><td>B是真数(0-9)，R是基数(个十百)</td></tr>
    <tr><td>Shell</td><td>O(nlogn)</td><td>O(n^s) 1&lt;s&lt;2</td><td> 不稳定</td><td>O(1)</td><td>s是所选分组</td></tr>
    <tr><td>快速</td><td>O(nlogn)</td><td>O(n^2)</td><td>不稳定</td><td>O(nlogn)</td><td>n大时较好</td></tr>
    <tr><td>归并</td><td>O(nlogn)</td><td>O(nlogn)</td><td>稳定</td><td>O(1)</td><td>n大时较好</td></tr>
    <tr><td>堆</td><td>O(nlogn)</td><td>O(nlogn)</td><td>不稳定</td><td>O(1)</td><td>n大时较好</td></tr>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目管理的ONP原则]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/04/28/opn-principle/"/>
    <updated>2013-04-28T23:01:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/04/28/opn-principle</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://placekitten.com/240/320"></p>

<p>前阵子学到了一招，项目管理中关于预估的ONP原则。</p>


<p>顾名思义，O乐观估计，N普通估计，P悲观估计。</p>


<!--more-->


<p>当有一个新需求产生的时候，产品经理大表哥总是会问，“这个需要多长时间啊，最快什么时候能好？应该很简单的吧” 。</p>


<p>年轻气盛的小瘦就会回答了：“嗯，这个简单。两天帮你搞定。包在我身上。” 大表哥听了很高兴。这叫乐观估计。</p>


<p>曾吃过亏的老龚就会说：“这项工作我来做的话，需要4天完成。但考虑到各种不确定因素，保守估计8天吧。你的需求有哪次不是变来变去的？”大表哥羞愧的低下了头。这叫悲观估计。</p>


<p>见过世面的大师掐指一算：“老衲觉得需要4.3天，就算是5天吧。但也可能需要6天或者7天。” “大师，此话怎讲。说了等于白说。”</p>


<p>大师继续说：“其实佛祖托梦，给了我一个计算公式。套用即可。” “大师，您也太能忽悠了。”</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>μ = (O+4N+P)/6           #平均值 
</span><span class='line'>σ = (P-O)/6              #标准差
</span><span class='line'>U = μ or μ+1σ or μ+2σ    #估算值</span></code></pre></td></tr></table></div></figure>


<p>工作量预估实际上是一个概率分布问题。就拿刚才的例子来说，这个工作项有10%的可能性在2天内完成，15%的可能性在3天内完成，30%的可能性在4天内完成，25%的可能性在5天内完成，在6、7、8天内完成的可能性分别是10%、6%和3%。在1天以内或者9天以上完成的可能性基本为0。</p>


<p>当然，上述分布的情况比较理想化，只是用来举例。每次项目要如此进行概率估算，并且计算平均值和标准差，还是比较复杂的。为了简化计算，前人总结出了以上公式。</p>




<p>各位今后在进行工作量预估的时候不妨也这么试一下。先确定好合理的ONP，再套用公式。顺便把这套算法讲给产品经理听，做一个守信的专业程序员。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[唯一不变的只有变化]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/04/27/wei-yi-bu-bian-de-zhi-you-bian-hua/"/>
    <updated>2013-04-27T09:09:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/04/27/wei-yi-bu-bian-de-zhi-you-bian-hua</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://placekitten.com/180/240">
知名科幻小说家Cory Doctorow曾说：“铁匠在啤酒中洒下眼泪，悲叹自己没有办法在铁路时代卖马掌，但这并不会使他们的马掌更受欢迎。那些学习变成机械师的铁匠才会保住自己的饭碗。”</p>

<p>企业也好，团队也好，唯有快速顺应时代才能赢得未来，产品生产方式必须因时代而变。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo teach me lean startup lessons
</span><span class='line'>$sudo show me the money</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://lxmxhh.github.io/blog/2013/04/26/hello-world/"/>
    <updated>2013-04-26T23:47:00+08:00</updated>
    <id>http://lxmxhh.github.io/blog/2013/04/26/hello-world</id>
    <content type="html"><![CDATA[<p><img src="http://placekitten.com/890/280"></p>
]]></content>
  </entry>
  
</feed>
